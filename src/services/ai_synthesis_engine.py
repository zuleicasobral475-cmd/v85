#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - AI Synthesis Engine
Motor de s√≠ntese da IA com ferramentas de busca ativa
"""

import os
import logging
import json
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime
from pathlib import Path
from services.ai_manager import ai_manager
from services.search_api_manager import search_api_manager

logger = logging.getLogger(__name__)

class AISynthesisEngine:
    """Motor de s√≠ntese da IA com busca ativa"""

    def __init__(self):
        """Inicializa o motor de s√≠ntese"""
        self.synthesis_prompts = self._load_synthesis_prompts()
        logger.info("üß† AI Synthesis Engine inicializado")

    def _load_synthesis_prompts(self) -> Dict[str, str]:
        """Carrega prompts de s√≠ntese"""
        return {
            'master_synthesis': """
            Voc√™ √© um analista estrat√©gico especializado em s√≠ntese de dados de mercado.

            Sua miss√£o √© estudar profundamente o relat√≥rio de coleta fornecido e criar uma s√≠ntese estruturada e acion√°vel.

            IMPORTANTE: Voc√™ tem acesso √† ferramenta google_search. Use-a sempre que:
            - Encontrar um t√≥pico que precisa de aprofundamento
            - Precisar verificar dados ou estat√≠sticas
            - Quiser buscar informa√ß√µes mais recentes
            - Identificar tend√™ncias que precisam de valida√ß√£o

            INSTRU√á√ïES:
            1. Analise todo o conte√∫do do relat√≥rio de coleta
            2. Use a ferramenta de busca para enriquecer sua an√°lise
            3. Sintetize todos os achados em um JSON estruturado

            ESTRUTURA DO JSON DE RESPOSTA:
            {
                "insights_principais": [
                    "Lista de 10-15 insights principais extra√≠dos"
                ],
                "oportunidades_identificadas": [
                    "Lista de 8-12 oportunidades de mercado"
                ],
                "publico_alvo_refinado": {
                    "demografia": "Perfil demogr√°fico refinado",
                    "psicografia": "Perfil psicogr√°fico detalhado",
                    "comportamentos": "Padr√µes comportamentais identificados",
                    "dores_principais": ["Lista das principais dores"],
                    "desejos_principais": ["Lista dos principais desejos"]
                },
                "estrategias_recomendadas": [
                    "Lista de 6-10 estrat√©gias espec√≠ficas"
                ],
                "pontos_atencao": [
                    "Lista de 5-8 pontos que requerem aten√ß√£o"
                ],
                "dados_mercado": {
                    "tamanho_estimado": "Estimativa do tamanho do mercado",
                    "crescimento_projetado": "Proje√ß√£o de crescimento",
                    "principais_players": ["Lista dos principais players"],
                    "barreiras_entrada": ["Principais barreiras"]
                },
                "tendencias_futuras": [
                    "Lista de tend√™ncias identificadas para o futuro"
                ],
                "metricas_chave": {
                    "kpis_sugeridos": ["Lista de KPIs recomendados"],
                    "benchmarks": "Benchmarks de mercado identificados"
                }
            }

            RELAT√ìRIO DE COLETA:
            """
        }

    async def analyze_and_synthesize(
        self, 
        session_id: str, 
        model: str = "gemini", 
        api_key: str = None, 
        analysis_time: int = 300
    ) -> Dict[str, Any]:
        """
        Analisa e sintetiza dados coletados usando IA com ferramentas
        
        Args:
            session_id: ID da sess√£o
            model: Modelo de IA a usar
            api_key: Chave da API (opcional)
            analysis_time: Tempo m√°ximo de an√°lise em segundos
        """
        logger.info(f"üß† Iniciando s√≠ntese com IA para sess√£o: {session_id}")
        
        try:
            # 1. Carrega relat√≥rio de coleta
            relatorio_coleta = self._load_collection_report(session_id)
            if not relatorio_coleta:
                raise Exception("Relat√≥rio de coleta n√£o encontrado")
            
            # 2. Constr√≥i prompt mestre
            master_prompt = self._build_master_prompt(relatorio_coleta)
            
            # 3. Executa s√≠ntese com ferramentas
            logger.info("üîç Executando s√≠ntese com ferramentas de busca ativa...")
            synthesis_result = await ai_manager.generate_with_tools(
                prompt=master_prompt,
                context=relatorio_coleta[:10000],  # Primeiros 10k caracteres como contexto
                tools=['google_search'],
                max_iterations=5
            )
            
            # 4. Processa e valida resultado
            processed_synthesis = self._process_synthesis_result(synthesis_result)
            
            # 5. Salva s√≠ntese
            synthesis_path = self._save_synthesis_result(session_id, processed_synthesis)
            
            logger.info(f"‚úÖ S√≠ntese conclu√≠da e salva em: {synthesis_path}")
            
            return {
                "success": True,
                "session_id": session_id,
                "synthesis_path": synthesis_path,
                "synthesis_data": processed_synthesis,
                "analysis_time": analysis_time,
                "model_used": model,
                "tools_used": ["google_search"],
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na s√≠ntese: {e}")
            return {
                "success": False,
                "error": str(e),
                "session_id": session_id,
                "timestamp": datetime.now().isoformat()
            }

    def _load_collection_report(self, session_id: str) -> Optional[str]:
        """Carrega relat√≥rio de coleta da sess√£o"""
        try:
            report_path = Path(f"analyses_data/{session_id}/relatorio_coleta.md")
            if report_path.exists():
                with open(report_path, 'r', encoding='utf-8') as f:
                    return f.read()
            
            logger.warning(f"‚ö†Ô∏è Relat√≥rio de coleta n√£o encontrado: {report_path}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar relat√≥rio: {e}")
            return None

    def _build_master_prompt(self, relatorio_coleta: str) -> str:
        """Constr√≥i prompt mestre para s√≠ntese"""
        base_prompt = self.synthesis_prompts['master_synthesis']
        return f"{base_prompt}\n\n{relatorio_coleta}"

    def _process_synthesis_result(self, synthesis_result: str) -> Dict[str, Any]:
        """Processa resultado da s√≠ntese"""
        try:
            # Tenta extrair JSON da resposta
            if "```json" in synthesis_result:
                start = synthesis_result.find("```json") + 7
                end = synthesis_result.rfind("```")
                json_text = synthesis_result[start:end].strip()
                return json.loads(json_text)
            
            # Se n√£o encontrar JSON, tenta parsear a resposta inteira
            try:
                return json.loads(synthesis_result)
            except json.JSONDecodeError:
                # Fallback: cria estrutura b√°sica
                return self._create_fallback_synthesis(synthesis_result)
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar s√≠ntese: {e}")
            return self._create_fallback_synthesis(synthesis_result)

    def _create_fallback_synthesis(self, raw_text: str) -> Dict[str, Any]:
        """Cria s√≠ntese de fallback"""
        return {
            "insights_principais": [
                "S√≠ntese gerada em modo de fallback",
                "An√°lise baseada no conte√∫do coletado",
                "Recomenda-se revis√£o manual dos dados"
            ],
            "oportunidades_identificadas": [
                "Oportunidades identificadas no conte√∫do coletado",
                "An√°lise de mercado baseada em dados reais"
            ],
            "publico_alvo_refinado": {
                "demografia": "Perfil baseado na an√°lise dos dados",
                "psicografia": "Caracter√≠sticas psicol√≥gicas identificadas",
                "comportamentos": "Padr√µes comportamentais observados",
                "dores_principais": ["Dores identificadas na an√°lise"],
                "desejos_principais": ["Desejos identificados na an√°lise"]
            },
            "estrategias_recomendadas": [
                "Estrat√©gias baseadas na an√°lise dos dados coletados"
            ],
            "pontos_atencao": [
                "Pontos que requerem aten√ß√£o especial"
            ],
            "raw_synthesis": raw_text[:2000],
            "fallback_mode": True,
            "timestamp": datetime.now().isoformat()
        }

    def _save_synthesis_result(self, session_id: str, synthesis_data: Dict[str, Any]) -> str:
        """Salva resultado da s√≠ntese"""
        try:
            session_dir = Path(f"analyses_data/{session_id}")
            session_dir.mkdir(parents=True, exist_ok=True)
            
            synthesis_path = session_dir / "resumo_sintese.json"
            
            with open(synthesis_path, 'w', encoding='utf-8') as f:
                json.dump(synthesis_data, f, ensure_ascii=False, indent=2)
            
            return str(synthesis_path)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar s√≠ntese: {e}")
            raise

# Inst√¢ncia global
ai_synthesis_engine = AISynthesisEngine()