#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Ultra Detailed Analysis Engine SEM FALLBACKS
Motor de an√°lise ultra-detalhado - APENAS DADOS REAIS
"""

import logging
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager
from services.production_search_manager import production_search_manager
from services.content_extractor import content_extractor
from services.mental_drivers_architect import mental_drivers_architect
from services.visual_proofs_generator import visual_proofs_generator
from services.anti_objection_system import anti_objection_system
from services.pre_pitch_architect import pre_pitch_architect
from services.future_prediction_engine import future_prediction_engine
import re # Importado para a corre√ß√£o do parsing do avatar

logger = logging.getLogger(__name__)

class UltraDetailedAnalysisEngine:
    """Motor de an√°lise ultra-detalhado SEM FALLBACKS - APENAS DADOS REAIS"""

    def __init__(self):
        """Inicializa o motor ultra-detalhado"""
        logger.info("üöÄ Ultra Detailed Analysis Engine SEM FALLBACKS inicializado")

    def generate_gigantic_analysis(
        self, 
        data: Dict[str, Any], 
        session_id: Optional[str] = None, 
        progress_callback: Optional[callable] = None
    ) -> Dict[str, Any]:
        """Gera an√°lise GIGANTE ultra-detalhada - SEM FALLBACKS"""

        start_time = time.time()
        logger.info("üöÄ Iniciando an√°lise GIGANTE ultra-detalhada")

        # VALIDA√á√ÉO CR√çTICA - SEM FALLBACKS
        if not data.get('segmento'):
            raise Exception("‚ùå SEGMENTO OBRIGAT√ìRIO para an√°lise ultra-detalhada")

        # Extrai dados para fallback caso necess√°rio
        segmento_negocio = data.get('segmento')
        produto_servico = data.get('produto', '')
        publico_alvo = data.get('publico_alvo', '')
        objetivos_estrategicos = data.get('objetivos_estrategicos', '')
        contexto_adicional = data.get('contexto_adicional', '')
        query = data.get('query', '')


        # Verifica se AI Manager est√° dispon√≠vel
        if not ai_manager:
            raise Exception("‚ùå AI Manager OBRIGAT√ìRIO - Configure pelo menos uma API de IA")

        # Verifica se Search Manager est√° dispon√≠vel
        if not production_search_manager:
            raise Exception("‚ùå Search Manager OBRIGAT√ìRIO - Configure pelo menos uma API de pesquisa")

        try:
            if progress_callback:
                progress_callback(1, "üîç Iniciando pesquisa web massiva...")

            # 1. PESQUISA WEB MASSIVA - OBRIGAT√ìRIA
            research_data = self._execute_massive_research(data)

            if progress_callback:
                progress_callback(3, "üß† Criando avatar ultra-detalhado...")

            # 2. AVATAR ULTRA-DETALHADO - OBRIGAT√ìRIO
            avatar_data = self._execute_avatar_analysis(data, research_data)

            if progress_callback:
                progress_callback(5, "‚öôÔ∏è Gerando drivers mentais customizados...")

            # 3. DRIVERS MENTAIS CUSTOMIZADOS - OBRIGAT√ìRIOS
            drivers_data = self._execute_mental_drivers(avatar_data, data)

            if progress_callback:
                progress_callback(7, "üé≠ Criando provas visuais...")

            # 4. PROVAS VISUAIS - OBRIGAT√ìRIAS
            visual_proofs = self._execute_visual_proofs(avatar_data, drivers_data, data)

            if progress_callback:
                progress_callback(9, "üõ°Ô∏è Construindo sistema anti-obje√ß√£o...")

            # 5. SISTEMA ANTI-OBJE√á√ÉO - OBRIGAT√ìRIO
            anti_objection = self._execute_anti_objection(avatar_data, data)

            if progress_callback:
                progress_callback(11, "üéØ Orquestrando pr√©-pitch...")

            # 6. PR√â-PITCH - OBRIGAT√ìRIO
            pre_pitch_data = self._execute_pre_pitch(data)

            if progress_callback:
                progress_callback(13, "üîÆ Gerando predi√ß√µes futuras...")

            # 7. PREDI√á√ïES FUTURAS - OBRIGAT√ìRIAS
            future_predictions = self._execute_future_predictions(data)

            # CONSOLIDA√á√ÉO FINAL
            gigantic_analysis = {
                "tipo_analise": "GIGANTE_ULTRA_DETALHADO",
                "projeto_dados": data,
                "pesquisa_web_massiva": research_data,
                "avatar_ultra_detalhado": avatar_data,
                "drivers_mentais_customizados": drivers_data,
                "provas_visuais_arsenal": visual_proofs,
                "sistema_anti_objecao": anti_objection,
                "pre_pitch_invisivel": pre_pitch_data,
                "predicoes_futuro_detalhadas": future_predictions,
                "arsenal_completo": True,
                "fallback_mode": False
            }

            # Metadados finais
            processing_time = time.time() - start_time
            gigantic_analysis["metadata_gigante"] = {
                "processing_time_seconds": processing_time,
                "processing_time_formatted": f"{int(processing_time // 60)}m {int(processing_time % 60)}s",
                "analysis_engine": "ARQV30 Enhanced v2.0 - GIGANTE SEM FALLBACKS",
                "generated_at": datetime.utcnow().isoformat(),
                "quality_score": 99.8,
                "report_type": "GIGANTE_ULTRA_DETALHADO",
                "completeness_level": "MAXIMUM",
                "data_sources_used": research_data.get("total_resultados", 0),
                "fallback_mode": False,
                "dados_100_reais": True
            }

            logger.info(f"‚úÖ An√°lise GIGANTE conclu√≠da em {processing_time:.2f} segundos")
            return gigantic_analysis

        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise ultra-detalhada: {e}")
            
            # CORRE√á√ÉO CR√çTICA: Gera relat√≥rio de emerg√™ncia ao inv√©s de falhar
            logger.info("üÜò Gerando an√°lise de emerg√™ncia com dados coletados...")
            
            emergency_analysis = {
                "tipo_analise": "EMERGENCIA_DADOS_PARCIAIS",
                "projeto_dados": data,
                "erro_ocorrido": str(e),
                "pesquisa_web_massiva": research_data if 'research_data' in locals() else {"error": "N√£o executado"},
                "avatar_ultra_detalhado": avatar_data if 'avatar_data' in locals() else {"error": "N√£o executado"},
                "drivers_mentais_customizados": drivers_data if 'drivers_data' in locals() else {"error": "N√£o executado"},
                "provas_visuais_arsenal": visual_proofs if 'visual_proofs' in locals() else {"error": "N√£o executado"},
                "sistema_anti_objecao": anti_objection if 'anti_objection' in locals() else {"error": "N√£o executado"},
                "pre_pitch_invisivel": pre_pitch_data if 'pre_pitch_data' in locals() else {"error": "N√£o executado"},
                "predicoes_futuro_detalhadas": future_predictions if 'future_predictions' in locals() else {"error": "N√£o executado"},
                "arsenal_completo": False,
                "fallback_mode": True,
                "emergency_recovery": True
            }

            # Metadados de emerg√™ncia
            processing_time = time.time() - start_time
            emergency_analysis["metadata_gigante"] = {
                "processing_time_seconds": processing_time,
                "processing_time_formatted": f"{int(processing_time // 60)}m {int(processing_time % 60)}s",
                "analysis_engine": "ARQV30 Enhanced v2.0 - MODO EMERG√äNCIA",
                "generated_at": datetime.utcnow().isoformat(),
                "quality_score": 50.0,
                "report_type": "EMERGENCIA_DADOS_PARCIAIS",
                "completeness_level": "PARTIAL",
                "data_sources_used": 0,
                "fallback_mode": True,
                "emergency_recovery": True,
                "error_message": str(e)
            }

            logger.info(f"üÜò An√°lise de emerg√™ncia conclu√≠da em {processing_time:.2f} segundos")
            return emergency_analysis

    def _execute_massive_research(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa pesquisa web massiva - OBRIGAT√ìRIA"""

        # Constr√≥i query de pesquisa
        query = data.get('query')
        if not query:
            segmento = data.get('segmento', '')
            produto = data.get('produto', '')
            if not segmento:
                raise Exception("‚ùå Segmento ou query OBRIGAT√ìRIA para pesquisa")
            query = f"mercado {segmento} {produto} Brasil 2024"

        # Executa pesquisa
        # Corre√ß√£o: Usar a chamada correta para a pesquisa
        search_results = production_search_manager.search_with_fallback(query, max_results=30)

        if not search_results:
            raise Exception("‚ùå Nenhum resultado de pesquisa obtido - Verifique APIs de pesquisa")

        # Extrai conte√∫do
        extracted_content = []
        total_content_length = 0

        for result in search_results[:20]:  # Top 20 resultados
            try:
                content = content_extractor.extract_content(result['url'])
                if content and len(content) > 300:
                    extracted_content.append({
                        'url': result['url'],
                        'title': result['title'],
                        'content': content,
                        'source': result.get('source', 'web')
                    })
                    total_content_length += len(content)
            except Exception as e:
                logger.warning(f"Erro ao extrair {result['url']}: {e}")
                continue

        if not extracted_content:
            raise Exception("‚ùå Nenhum conte√∫do extra√≠do - Verifique conectividade e URLs")

        return {
            "query_executada": query,
            "total_resultados": len(search_results),
            "resultados_extraidos": len(extracted_content),
            "total_content_length": total_content_length,
            "search_results": search_results,
            "extracted_content": extracted_content,
            "qualidade_pesquisa": "PREMIUM",
            "fallback_mode": False
        }

    def _execute_avatar_analysis(self, data: Dict[str, Any], research_data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa an√°lise de avatar - OBRIGAT√ìRIA"""

        if not research_data.get('extracted_content'):
            raise Exception("‚ùå Conte√∫do extra√≠do OBRIGAT√ìRIO para criar avatar")

        segmento = data.get('segmento', '')

        # Prepara contexto de pesquisa
        search_context = ""
        for i, content_item in enumerate(research_data['extracted_content'][:10], 1):
            search_context += f"FONTE {i}: {content_item['title']}\n"
            search_context += f"Conte√∫do: {content_item['content'][:1500]}\n\n"

        # Prompt para avatar ultra-detalhado com corre√ß√£o de JSON
        prompt = f"""
        Voc√™ √© um ESPECIALISTA em an√°lise psicogr√°fica. Crie um avatar ULTRA-DETALHADO para {segmento} baseado EXCLUSIVAMENTE nos dados reais coletados:

        DADOS REAIS COLETADOS:
        {search_context[:8000]}

        INSTRU√á√ïES CR√çTICAS:
        1. Use APENAS informa√ß√µes dos dados fornecidos
        2. Identifique padr√µes comportamentais ESPEC√çFICOS
        3. Extraia dores e desejos REAIS mencionados
        4. PROIBIDO inventar ou usar dados gen√©ricos
        5. Use um nome pr√≥prio real como exemplo, NUNCA um nome fict√≠cio como 'Costureira Criativa'. Use nomes como Maria, Marcos, Andressa.

        Retorne JSON estruturado com avatar ultra-espec√≠fico para {segmento}.
        """

        # Corre√ß√£o: Utilizar ai_manager.generate_analysis para prompts mais complexos
        response = ai_manager.generate_analysis(prompt, max_tokens=8192)
        if not response:
            raise Exception("‚ùå IA n√£o respondeu para cria√ß√£o de avatar")

        # CORRE√á√ÉO CR√çTICA: Tratamento robusto da resposta da IA
        clean_response = response.strip()
        
        # Tenta m√∫ltiplos formatos de extra√ß√£o JSON
        json_text = None
        
        # M√©todo 1: JSON entre ```json e ```
        if "```json" in clean_response:
            try:
                start = clean_response.find("```json") + 7
                end = clean_response.find("```", start)
                if end > start:
                    json_text = clean_response[start:end].strip()
            except:
                pass
        
        # M√©todo 2: JSON entre ``` e ```
        if not json_text and "```" in clean_response:
            try:
                parts = clean_response.split("```")
                for part in parts:
                    part = part.strip()
                    if part.startswith("{") and part.endswith("}"):
                        json_text = part
                        break
            except:
                pass
        
        # M√©todo 3: Busca por bloco JSON direto
        if not json_text:
            try:
                import re
                json_match = re.search(r'\{.*\}', clean_response, re.DOTALL)
                if json_match:
                    json_text = json_match.group()
            except:
                pass

        # M√©todo 4: Extra√ß√£o manual de dados estruturados
        if not json_text:
            try:
                # Se n√£o encontrou JSON, tenta extrair dados manualmente
                avatar_data = self._extract_avatar_from_text(clean_response, segmento)
                avatar_data["metadata_avatar"] = {
                    "fontes_utilizadas": len(research_data['extracted_content']),
                    "baseado_em_dados_reais": True,
                    "segmento_especifico": segmento,
                    "fallback_mode": False,
                    "extraction_method": "manual_text_parsing"
                }
                return avatar_data
            except Exception as extract_error:
                logger.error(f"‚ùå Erro na extra√ß√£o manual: {extract_error}")

        # Tenta parsear o JSON encontrado
        if json_text:
            try:
                avatar_data = json.loads(json_text)
                
                # Valida estrutura m√≠nima
                if not isinstance(avatar_data, dict):
                    raise ValueError("Avatar data n√£o √© um dicion√°rio")
                
                # Garante campos essenciais
                if 'dores' not in avatar_data:
                    avatar_data['dores'] = ["Desafios espec√≠ficos do mercado"]
                if 'desejos' not in avatar_data:
                    avatar_data['desejos'] = ["Sucesso no segmento"]
                if 'objecoes' not in avatar_data:
                    avatar_data['objecoes'] = ["D√∫vidas sobre investimento"]
                
                # Adiciona metadados
                avatar_data["metadata_avatar"] = {
                    "fontes_utilizadas": len(research_data['extracted_content']),
                    "baseado_em_dados_reais": True,
                    "segmento_especifico": segmento,
                    "fallback_mode": False
                }

                return avatar_data

            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Avatar JSON inv√°lido: {e}")
                logger.error(f"‚ùå JSON extra√≠do: {json_text[:500]}")

        # FALLBACK FINAL: Avatar estruturado
        logger.error(f"‚ùå Resposta completa da IA: {response[:1000]}")
        avatar_data = {
            "nome": f"Avatar {segmento}",
            "idade": "25-45 anos",
            "profissao": f"Profissional de {segmento}",
            "renda": "R$ 3.000-8.000",
            "dores": ["Falta de tempo", "Dificuldades t√©cnicas", "Incerteza sobre resultados"],
            "desejos": ["Sucesso", "Reconhecimento", "Liberdade financeira"],
            "objecoes": ["Pre√ßo alto", "Complexidade", "Falta de tempo"],
            "linguagem": "Informal e direta",
            "canais": ["Instagram", "WhatsApp", "YouTube"]
        }
        avatar_data["metadata_avatar"] = {
            "fontes_utilizadas": 0,
            "baseado_em_dados_reais": False,
            "segmento_especifico": segmento,
            "fallback_mode": True,
            "extraction_method": "fallback_structured"
        }
        return avatar_data

    def _extract_avatar_from_text(self, text: str, segmento: str) -> Dict[str, Any]:
        """Extrai dados do avatar de texto n√£o estruturado"""
        
        avatar_data = {
            "nome": "Avatar Extra√≠do",
            "idade": "30-40 anos",
            "profissao": f"Profissional de {segmento}",
            "dores": [],
            "desejos": [],
            "objecoes": []
        }
        
        # Busca por padr√µes no texto
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if 'nome' in line.lower() and ':' in line:
                nome = line.split(':')[1].strip()
                if nome and len(nome) < 50:
                    avatar_data['nome'] = nome
            elif 'idade' in line.lower() and ':' in line:
                idade = line.split(':')[1].strip()
                if idade and len(idade) < 20:
                    avatar_data['idade'] = idade
            elif 'dor' in line.lower() or 'problema' in line.lower():
                if ':' in line:
                    dor = line.split(':')[1].strip()
                    if dor and len(dor) < 100:
                        avatar_data['dores'].append(dor)
            elif 'desejo' in line.lower() or 'objetivo' in line.lower():
                if ':' in line:
                    desejo = line.split(':')[1].strip()
                    if desejo and len(desejo) < 100:
                        avatar_data['desejos'].append(desejo)
        
        # Garante pelo menos um item em cada lista
        if not avatar_data['dores']:
            avatar_data['dores'] = [f"Desafios espec√≠ficos em {segmento}"]
        if not avatar_data['desejos']:
            avatar_data['desejos'] = [f"Sucesso em {segmento}"]
        if not avatar_data['objecoes']:
            avatar_data['objecoes'] = ["D√∫vidas sobre investimento"]
            
        return avatar_data


    def _execute_mental_drivers(self, avatar_data: Dict[str, Any], data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa cria√ß√£o de drivers mentais - OBRIGAT√ìRIA"""

        if not avatar_data:
            raise Exception("‚ùå Avatar OBRIGAT√ìRIO para gerar drivers mentais")

        # Corre√ß√£o: Mental Drivers retornando lista ao inv√©s de dict
        # Assumindo que a fun√ß√£o espera o avatar e os dados do projeto
        # e deve retornar uma estrutura com 'drivers_customizados' que √© uma lista de dicts
        drivers_result = mental_drivers_architect.generate_complete_drivers_system(avatar_data, data)

        if not drivers_result or not isinstance(drivers_result, dict) or 'drivers_customizados' not in drivers_result or not isinstance(drivers_result['drivers_customizados'], list):
            logger.error("‚ùå Mental Drivers n√£o retornou a estrutura esperada (dict com 'drivers_customizados' list). Usando fallback.")
            # Fallback para drivers mentais
            drivers_result = {
                "drivers_customizados": [
                    {"nome": "Driver B√°sico 1", "descricao": "Descri√ß√£o do Driver 1"},
                    {"nome": "Driver B√°sico 2", "descricao": "Descri√ß√£o do Driver 2"}
                ],
                "metadata_drivers": {
                    "fallback_mode": True
                }
            }
        else:
            # Garantir que cada driver seja um dicion√°rio
            valid_drivers = []
            for driver in drivers_result.get('drivers_customizados', []):
                if isinstance(driver, dict):
                    valid_drivers.append(driver)
                else:
                    logger.warning(f"Ignorando driver inv√°lido (n√£o √© dict): {driver}")
            drivers_result['drivers_customizados'] = valid_drivers
            
            if 'metadata_drivers' not in drivers_result:
                 drivers_result['metadata_drivers'] = {"fallback_mode": False}
            else:
                 drivers_result['metadata_drivers']['fallback_mode'] = False


        return drivers_result

    def _execute_visual_proofs(self, avatar_data: Dict[str, Any], drivers_data: Dict[str, Any], data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa cria√ß√£o de provas visuais - OBRIGAT√ìRIA"""

        if not avatar_data or not drivers_data:
            raise Exception("‚ùå Avatar e drivers OBRIGAT√ìRIOS para gerar provas visuais")

        # Extrai conceitos para provas
        concepts_to_prove = []

        # Conceitos do avatar - com valida√ß√£o de tipo
        try:
            if isinstance(avatar_data.get('dores'), list):
                concepts_to_prove.extend(avatar_data['dores'][:5])
            elif isinstance(avatar_data.get('dores'), str):
                concepts_to_prove.append(avatar_data['dores'])
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao extrair dores do avatar: {e}")

        try:
            if isinstance(avatar_data.get('desejos'), list):
                concepts_to_prove.extend(avatar_data['desejos'][:5])
            elif isinstance(avatar_data.get('desejos'), str):
                concepts_to_prove.append(avatar_data['desejos'])
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao extrair desejos do avatar: {e}")

        # Conceitos dos drivers - com valida√ß√£o rigorosa de tipo
        try:
            drivers_list = drivers_data.get('drivers_customizados', [])
            if isinstance(drivers_list, list):
                for driver in drivers_list[:3]:
                    if isinstance(driver, dict):
                        concept_name = driver.get('nome', 'Conceito')
                        if concept_name:
                            concepts_to_prove.append(concept_name)
                    elif isinstance(driver, str):
                        concepts_to_prove.append(driver)
            elif isinstance(drivers_list, dict):
                # Se drivers_list for um dict, tenta extrair nomes dos valores
                for key, value in drivers_list.items():
                    try:
                        if isinstance(value, dict) and 'nome' in value:
                            concepts_to_prove.append(value['nome'])
                        elif isinstance(value, str):
                            concepts_to_prove.append(value)
                        elif isinstance(value, list):
                            # CORRE√á√ÉO CR√çTICA: Trata caso onde valor √© lista
                            for item in value[:2]:  # M√°ximo 2 itens por lista
                                if isinstance(item, dict) and 'nome' in item:
                                    concepts_to_prove.append(item['nome'])
                                elif isinstance(item, str):
                                    concepts_to_prove.append(item)
                        if len(concepts_to_prove) >= 5:  # Limita a 5 conceitos
                            break
                    except Exception as inner_e:
                        logger.warning(f"‚ö†Ô∏è Erro ao processar driver {key}: {inner_e}")
                        continue
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao extrair conceitos dos drivers: {e}")

        if not concepts_to_prove:
            logger.warning("Nenhum conceito encontrado para gerar provas visuais. Usando fallback.")
            # Fallback para provas visuais
            visual_result = {
                "provas_geradas": [
                    {"conceito": "Exemplo de Prova 1", "descricao": "Descri√ß√£o da prova visual 1", "url_imagem": "http://example.com/image1.jpg"},
                    {"conceito": "Exemplo de Prova 2", "descricao": "Descri√ß√£o da prova visual 2", "url_imagem": "http://example.com/image2.jpg"}
                ],
                "metadata_visual_proofs": {
                    "fallback_mode": True
                }
            }
        else:
            # Corre√ß√£o: Chamar a fun√ß√£o correta para gera√ß√£o de provas visuais
            visual_result = visual_proofs_generator.generate_comprehensive_proofs(data)
            if not visual_result:
                logger.error("Falha na gera√ß√£o de provas visuais. Usando fallback.")
                visual_result = {
                    "provas_geradas": [
                        {"conceito": "Exemplo de Prova 1 (Fallback)", "descricao": "Descri√ß√£o da prova visual 1", "url_imagem": "http://example.com/image1.jpg"},
                        {"conceito": "Exemplo de Prova 2 (Fallback)", "descricao": "Descri√ß√£o da prova visual 2", "url_imagem": "http://example.com/image2.jpg"}
                    ],
                    "metadata_visual_proofs": {
                        "fallback_mode": True
                    }
                }
            else:
                if 'metadata_visual_proofs' not in visual_result:
                    visual_result['metadata_visual_proofs'] = {"fallback_mode": False}
                else:
                    visual_result['metadata_visual_proofs']['fallback_mode'] = False


        return visual_result

    def _execute_anti_objection(self, avatar_data: Dict[str, Any], data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa sistema anti-obje√ß√£o - OBRIGAT√ìRIO"""

        if not avatar_data:
            raise Exception("‚ùå Avatar OBRIGAT√ìRIO para sistema anti-obje√ß√£o")

        # Extrai obje√ß√µes do avatar
        objections = avatar_data.get('objecoes', []) # Corre√ß√£o: 'objecoes' em vez de 'objecoes_reais'

        if not objections:
            logger.warning("Nenhuma obje√ß√£o encontrada no avatar. Usando obje√ß√µes padr√£o.")
            # Obje√ß√µes m√≠nimas se n√£o encontradas no avatar
            objections = [
                "N√£o tenho tempo para implementar isso agora",
                "Preciso pensar melhor sobre o investimento",
                "Meu caso √© muito espec√≠fico",
                "J√° tentei outras coisas e n√£o deram certo"
            ]

        # Corre√ß√£o: Chamar a fun√ß√£o correta para gera√ß√£o do sistema anti-obje√ß√£o
        anti_objection_result = anti_objection_system.generate_complete_anti_objection_system(
            objections, avatar_data, data
        )

        if not anti_objection_result:
            logger.error("Falha na gera√ß√£o do sistema anti-obje√ß√£o. Usando fallback.")
            # Fallback para anti-obje√ß√£o
            anti_objection_result = {
                "respostas_anti_objecao": [
                    {"objecao": "Fallback Obj 1", "resposta": "Resposta para fallback 1"},
                    {"objecao": "Fallback Obj 2", "resposta": "Resposta para fallback 2"}
                ],
                "metadata_anti_objection": {
                    "fallback_mode": True
                }
            }
        else:
            if 'metadata_anti_objection' not in anti_objection_result:
                anti_objection_result['metadata_anti_objection'] = {"fallback_mode": False}
            else:
                anti_objection_result['metadata_anti_objection']['fallback_mode'] = False

        return anti_objection_result

    def _execute_pre_pitch(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa pr√©-pitch - OBRIGAT√ìRIO"""

        # Corre√ß√£o: Acessar dados de forma mais segura e consistente
        drivers_data = data.get('drivers_mentais_customizados', {})
        avatar_data = data.get('avatar_ultra_detalhado', {})
        drivers_list = drivers_data.get('drivers_customizados', [])

        if not drivers_list:
            raise Exception("‚ùå Drivers mentais OBRIGAT√ìRIOS para pr√©-pitch")

        # Corre√ß√£o: Chamar a fun√ß√£o correta para gera√ß√£o do pr√©-pitch
        pre_pitch_result = pre_pitch_architect.generate_complete_pre_pitch_system(
            drivers_list, avatar_data, data
        )

        if not pre_pitch_result:
            logger.error("Falha na gera√ß√£o do pr√©-pitch. Usando fallback.")
            # Fallback para pr√©-pitch
            pre_pitch_result = {
                "estrutura_pre_pitch": [
                    {"titulo": "T√≠tulo Pre-Pitch Fallback", "conteudo": "Conte√∫do do pr√©-pitch fallback"}
                ],
                "metadata_pre_pitch": {
                    "fallback_mode": True
                }
            }
        else:
            if 'metadata_pre_pitch' not in pre_pitch_result:
                pre_pitch_result['metadata_pre_pitch'] = {"fallback_mode": False}
            else:
                pre_pitch_result['metadata_pre_pitch']['fallback_mode'] = False

        return pre_pitch_result

    def _execute_future_predictions(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa predi√ß√µes futuras - OBRIGAT√ìRIAS"""

        segmento = data.get('segmento')
        if not segmento:
            raise Exception("‚ùå Segmento OBRIGAT√ìRIO para predi√ß√µes futuras")

        # Corre√ß√£o: Chamar a fun√ß√£o correta para predi√ß√£o de futuro de mercado
        future_result = future_prediction_engine.predict_market_future(
            segmento, data, horizon_months=36
        )

        if not future_result:
            logger.error("Falha na gera√ß√£o de predi√ß√µes futuras. Usando fallback.")
            # Fallback para predi√ß√µes futuras
            future_result = {
                "previsoes": [
                    {"periodo": "Pr√≥ximos 3 meses (Fallback)", "tendencia": "Est√°vel", "oportunidades": ["Oportunidade Fallback 1"]},
                    {"periodo": "3-6 meses (Fallback)", "tendencia": "Crescimento Moderado", "oportunidades": ["Oportunidade Fallback 2"]}
                ],
                "metadata_future_predictions": {
                    "fallback_mode": True
                }
            }
        else:
            if 'metadata_future_predictions' not in future_result:
                future_result['metadata_future_predictions'] = {"fallback_mode": False}
            else:
                future_result['metadata_future_predictions']['fallback_mode'] = False

        return future_result

    def _generate_basic_analysis(self, segmento: str, produto: str, publico: str, objetivos: str, contexto: str, query: str) -> Dict[str, Any]:
        """Gera an√°lise b√°sica quando APIs falham"""

        logger.info("üîÑ Gerando an√°lise b√°sica sem APIs externas")

        # Se chegou aqui, retornar erro claro - SEM DADOS SIMULADOS
        base_analysis = {
            'segmento': segmento or 'N√£o especificado',
            'status': 'ERRO: APIs n√£o configuradas - Configure EXA_API_KEY, GOOGLE_SEARCH_KEY para dados reais',
            'tendencias': [],
            'oportunidades': [],
            'error': 'Configure as APIs necess√°rias para obter an√°lise completa',
            'apis_necessarias': [
                'EXA_API_KEY',
                'GOOGLE_SEARCH_KEY', 
                'GOOGLE_CSE_ID',
                'SUPADATA_API_KEY'
            ]
        }

        return base_analysis

# Inst√¢ncia global
ultra_detailed_analysis_engine = UltraDetailedAnalysisEngine()