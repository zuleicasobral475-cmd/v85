#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Anti-Objection System
Sistema de Engenharia Psicol√≥gica Anti-Obje√ß√£o
"""

import time
import random
import logging
import json
from typing import Dict, List, Any, Optional
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class AntiObjectionSystem:
    """Sistema de Engenharia Psicol√≥gica Anti-Obje√ß√£o"""

    def __init__(self, ai_manager_instance=None):
        """Inicializa o sistema anti-obje√ß√£o"""
        self.logger = logging.getLogger(__name__)
        self.ai_manager = ai_manager_instance or ai_manager
        self.universal_objections = self._load_universal_objections()
        self.hidden_objections = self._load_hidden_objections()
        self.neutralization_techniques = self._load_neutralization_techniques()

        logger.info("Anti-Objection System inicializado com arsenal completo")

    def _load_universal_objections(self) -> Dict[str, Dict[str, Any]]:
        """Carrega as 3 obje√ß√µes universais"""
        return {
            'tempo': {
                'objecao': 'N√£o tenho tempo / Isso n√£o √© prioridade para mim',
                'raiz_emocional': 'Medo de mais uma responsabilidade / Falta de clareza sobre import√¢ncia',
                'contra_ataque': 'T√©cnica do C√°lculo da Sangria + Consequ√™ncia Exponencial',
                'scripts': [
                    'Cada [per√≠odo] que voc√™ adia resolver [problema], voc√™ est√° perdendo [quantia espec√≠fica]',
                    'O problema n√£o para de crescer enquanto voc√™ est√° ocupado com outras coisas',
                    'Esta oportunidade existe agora por [raz√£o espec√≠fica], depois pode n√£o existir mais'
                ]
            },
            'dinheiro': {
                'objecao': 'N√£o tenho dinheiro / Minha vida n√£o est√° t√£o ruim que precise investir',
                'raiz_emocional': 'Medo de perder dinheiro / Prioridades desalinhadas / N√£o v√™ valor',
                'contra_ataque': 'Compara√ß√£o Cruel + ROI Absurdo + Custo de Oportunidade',
                'scripts': [
                    'Voc√™ gasta R$X em [coisa sup√©rflua] mas hesita em investir [valor] em algo que muda sua vida',
                    'Se voc√™ conseguir apenas [resultado m√≠nimo], j√° pagou o investimento [X] vezes',
                    'O que voc√™ vai perder N√ÉO fazendo isso √© muito maior que o investimento'
                ]
            },
            'confianca': {
                'objecao': 'Me d√™ uma raz√£o para acreditar (em voc√™/produto/provas/mim mesmo)',
                'raiz_emocional': 'Hist√≥rico de fracassos / Medo de mais uma decep√ß√£o / Baixa autoestima',
                'contra_ataque': 'Autoridade T√©cnica + Prova Social Qualificada + Garantia Agressiva',
                'scripts': [
                    'Eu j√° [credencial espec√≠fica] e consegui [resultado espec√≠fico] usando exatamente isso',
                    'Pessoas exatamente como voc√™ conseguiram [resultado] em [tempo] seguindo este m√©todo',
                    'Estou t√£o confiante que assumo todo o risco: [garantia espec√≠fica]'
                ]
            }
        }

    def _load_hidden_objections(self) -> Dict[str, Dict[str, Any]]:
        """Carrega as 5 obje√ß√µes ocultas cr√≠ticas"""
        return {
            'autossuficiencia': {
                'objecao_oculta': 'Acho que consigo sozinho',
                'perfil_tipico': 'Pessoas com forma√ß√£o superior, experi√™ncia na √°rea, ego profissional',
                'raiz_emocional': 'Orgulho / Medo de parecer incompetente',
                'sinais': ['Men√ß√µes de "tentar sozinho"', 'Resist√™ncia a ajuda', 'Linguagem t√©cnica excessiva'],
                'contra_ataque': 'O Expert que Precisou de Expert + Acelera√ß√£o vs Tentativa',
                'scripts': [
                    'Mesmo sendo [autoridade], precisei de ajuda para [resultado espec√≠fico]',
                    'A diferen√ßa entre tentar sozinho e ter orienta√ß√£o √© [compara√ß√£o temporal/financeira]'
                ]
            },
            'sinal_fraqueza': {
                'objecao_oculta': 'Aceitar ajuda √© admitir fracasso',
                'perfil_tipico': 'Homens, l√≠deres, pessoas com imagem a zelar',
                'raiz_emocional': 'Medo de julgamento / Perda de status / Humilha√ß√£o',
                'sinais': ['Minimiza√ß√£o de problemas', '"Est√° tudo bem"', 'Resist√™ncia a expor vulnerabilidade'],
                'contra_ataque': 'Reframe de Intelig√™ncia + Hist√≥rias de Her√≥is Vulner√°veis',
                'scripts': [
                    'Pessoas inteligentes buscam atalhos. Pessoas burras insistem no caminho dif√≠cil',
                    'Os maiores CEOs do mundo t√™m coaches. Coincid√™ncia?'
                ]
            },
            'medo_novo': {
                'objecao_oculta': 'N√£o tenho pressa / Quando for a hora certa',
                'perfil_tipico': 'Pessoas estagnadas mas "confort√°veis", medo do desconhecido',
                'raiz_emocional': 'Ansiedade sobre nova realidade / Zona de conforto',
                'sinais': ['"Quando for a hora certa"', 'Procrastina√ß√£o disfar√ßada', 'Conformismo'],
                'contra_ataque': 'Dor da Estagna√ß√£o + Janela Hist√≥rica',
                'scripts': [
                    'A √∫nica coisa pior que a dor da mudan√ßa √© a dor do arrependimento',
                    'Esta oportunidade existe por [contexto espec√≠fico]. Quem n√£o aproveitar agora...'
                ]
            },
            'prioridades_desequilibradas': {
                'objecao_oculta': 'N√£o √© dinheiro (mas gasta em outras coisas)',
                'perfil_tipico': 'Pessoas que gastam em lazer/consumo mas "n√£o t√™m dinheiro" para evolu√ß√£o',
                'raiz_emocional': 'N√£o reconhece educa√ß√£o como prioridade / V√≠cio em gratifica√ß√£o imediata',
                'sinais': ['Men√ß√µes de gastos em outras √°reas', 'Justificativas financeiras contradit√≥rias'],
                'contra_ataque': 'Compara√ß√£o Cruel + C√°lculo de Oportunidade Perdida',
                'scripts': [
                    'R$200/m√™s em streaming vs R$2000 uma vez para nunca mais passar aperto',
                    'Voc√™ investe mais no seu carro que na sua mente'
                ]
            },
            'autoestima_destruida': {
                'objecao_oculta': 'N√£o confio em mim / Sou eu o problema',
                'perfil_tipico': 'Pessoas com m√∫ltiplas tentativas fracassadas, baixa confian√ßa pessoal',
                'raiz_emocional': 'Hist√≥rico de fracassos / Medo de mais um fracasso',
                'sinais': ['"J√° tentei antes"', 'Hist√≥rico de fracassos', 'Vitimiza√ß√£o', 'Autodesqualifica√ß√£o'],
                'contra_ataque': 'Casos de Pessoas "Piores" + Diferencial do M√©todo',
                'scripts': [
                    'Se [pessoa pior situa√ß√£o] conseguiu, voc√™ tamb√©m consegue',
                    'O problema n√£o era voc√™, era a falta de m√©todo certo'
                ]
            }
        }

    def _load_neutralization_techniques(self) -> Dict[str, Dict[str, Any]]:
        """Carrega t√©cnicas de neutraliza√ß√£o"""
        return {
            'concordar_valorizar_apresentar': {
                'estrutura': 'Voc√™ tem raz√£o... Por isso criei...',
                'quando_usar': 'Obje√ß√µes l√≥gicas v√°lidas',
                'exemplo': 'Voc√™ tem raz√£o em ser cauteloso com investimentos. Por isso criei uma garantia de 60 dias...'
            },
            'inversao_perspectiva': {
                'estrutura': 'Na verdade √© o oposto do que voc√™ imagina...',
                'when_to_use': 'Cren√ßas limitantes',
                'exemplo': 'Na verdade, pessoas que mais precisam de ajuda s√£o as que mais resistem a ela...'
            },
            'memorias_reviravolta': {
                'estrutura': 'Lembre de quando voc√™ decidiu sem certeza...',
                'when_to_use': 'Medo de decis√£o',
                'exemplo': 'Lembre quando voc√™ decidiu [mudan√ßa importante] sem ter certeza absoluta...'
            },
            'confronto_controlado': {
                'estrutura': 'Quantas vezes voc√™ perdeu oportunidade por isso?',
                'when_to_use': 'Padr√µes autodestrutivos',
                'exemplo': 'Quantas vezes voc√™ j√° perdeu oportunidades por "pensar demais"?'
            },
            'nova_crenca': {
                'estrutura': 'Isso √© uma cren√ßa limitante, vou te mostrar outro √¢ngulo...',
                'when_to_use': 'Cren√ßas arraigadas',
                'exemplo': 'Isso √© uma cren√ßa limitante. Vou te mostrar como pessoas "sem tempo" criaram tempo...'
            }
        }

    def generate_complete_anti_objection_system(
        self, 
        objections_list: List[str], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera sistema completo anti-obje√ß√£o"""

        # Valida√ß√£o cr√≠tica de entrada
        if not objections_list:
            logger.error("‚ùå Lista de obje√ß√µes vazia")
            raise ValueError("SISTEMA ANTI-OBJE√á√ÉO FALHOU: Nenhuma obje√ß√£o fornecida")

        if not avatar_data:
            logger.error("‚ùå Dados do avatar ausentes")
            raise ValueError("SISTEMA ANTI-OBJE√á√ÉO FALHOU: Dados do avatar ausentes")

        if not context_data.get('segmento'):
            logger.error("‚ùå Segmento n√£o informado")
            raise ValueError("SISTEMA ANTI-OBJE√á√ÉO FALHOU: Segmento obrigat√≥rio")

        try:
            logger.info(f"üõ°Ô∏è Gerando sistema anti-obje√ß√£o para {len(objections_list)} obje√ß√µes")

            # Salva dados de entrada imediatamente
            salvar_etapa("anti_objecao_entrada", {
                "objections_list": objections_list,
                "avatar_data": avatar_data,
                "context_data": context_data
            }, categoria="anti_objecao")

            # Analisa obje√ß√µes espec√≠ficas do avatar
            analyzed_objections = self._analyze_specific_objections(objections_list, avatar_data)

            if not analyzed_objections:
                logger.error("‚ùå Falha na an√°lise de obje√ß√µes")
                # Usa fallback em vez de falhar
                logger.warning("üîÑ Usando an√°lise de obje√ß√µes padr√£o")
                analyzed_objections = [{"objecao_original": obj, "categoria": "geral"} for obj in objections_list]

            # Salva obje√ß√µes analisadas
            salvar_etapa("objecoes_analisadas", analyzed_objections, categoria="anti_objecao")

            # Mapeia para obje√ß√µes universais e ocultas
            mapped_objections = self._map_to_universal_objections(analyzed_objections)

            # Cria arsenal de contra-ataques
            counter_attacks = self._create_counter_attacks(mapped_objections, avatar_data, context_data)

            if not counter_attacks:
                logger.error("‚ùå Falha na cria√ß√£o de contra-ataques")
                # Usa fallback em vez de falhar
                logger.warning("üîÑ Usando contra-ataques padr√£o")
                counter_attacks = self._create_basic_counter_attacks(context_data)

            # Salva contra-ataques
            salvar_etapa("contra_ataques", counter_attacks, categoria="anti_objecao")

            # Gera scripts personalizados
            personalized_scripts = self._generate_personalized_scripts(counter_attacks, avatar_data, context_data)

            # Valida scripts gerados
            if not self._validate_scripts(personalized_scripts, context_data):
                logger.error("‚ùå Scripts gerados s√£o inv√°lidos")
                # Usa scripts b√°sicos em vez de falhar
                logger.warning("üîÑ Usando scripts b√°sicos como fallback")
                personalized_scripts = self._create_basic_scripts(avatar_data, context_data)

            # Salva scripts personalizados
            salvar_etapa("scripts_personalizados", personalized_scripts, categoria="anti_objecao")

            # Cria arsenal de emerg√™ncia
            emergency_arsenal = self._create_emergency_arsenal(avatar_data, context_data)

            result = {
                'objecoes_universais': self._customize_universal_objections(avatar_data, context_data),
                'objecoes_ocultas': self._identify_hidden_objections(avatar_data),
                'contra_ataques_personalizados': counter_attacks,
                'scripts_personalizados': personalized_scripts,
                'arsenal_emergencia': emergency_arsenal,
                'sequencia_neutralizacao': self._create_neutralization_sequence(mapped_objections),
                'metricas_eficacia': self._create_effectiveness_metrics(),
                'validation_status': 'VALID',
                'generation_timestamp': time.time()
            }

            # Salva resultado final imediatamente
            salvar_etapa("anti_objecao_final", result, categoria="anti_objecao")

            logger.info("‚úÖ Sistema anti-obje√ß√£o gerado com sucesso")
            return result

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sistema anti-obje√ß√£o: {str(e)}")
            salvar_erro("anti_objecao_sistema", e, contexto={"segmento": context_data.get('segmento')})

            # Fallback para sistema b√°sico em caso de erro
            logger.warning("üîÑ Gerando sistema anti-obje√ß√£o b√°sico como fallback...")
            return self._generate_fallback_anti_objection_system(context_data)

    def _validate_scripts(self, scripts: Dict[str, List[str]], context_data: Dict[str, Any]) -> bool:
        """Valida qualidade dos scripts gerados"""
        if not scripts or len(scripts) < 3:
            logger.error("‚ùå Scripts insuficientes gerados")
            return False

        segmento = context_data.get('segmento', '')
        total_content = 0

        for category, script_list in scripts.items():
            if not script_list or len(script_list) < 2:
                logger.error(f"‚ùå Categoria {category} com scripts insuficientes")
                return False

            for script in script_list:
                if len(script) < 50:  # Scripts muito curtos
                    logger.error(f"‚ùå Script muito curto: {script[:30]}...")
                    return False

                # Verifica se n√£o √© gen√©rico
                if 'customizado para' in script.lower() and len(script) < 100:
                    logger.error(f"‚ùå Script gen√©rico detectado: {script[:50]}...")
                    return False

                total_content += len(script)

        if total_content < 1000:  # M√≠nimo de conte√∫do total
            logger.error(f"‚ùå Scripts anti-obje√ß√£o muito curtos: {total_content} caracteres. M√≠nimo: 1000")
            return False

        return True

    def _analyze_specific_objections(
        self, 
        objections: List[str], 
        avatar_data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Analisa obje√ß√µes espec√≠ficas do avatar"""

        analyzed = []

        for objection in objections:
            analysis = {
                'objecao_original': objection,
                'categoria': self._categorize_objection(objection),
                'intensidade': self._assess_objection_intensity(objection),
                'raiz_emocional': self._identify_emotional_root(objection),
                'frequencia_esperada': self._estimate_frequency(objection, avatar_data)
            }
            analyzed.append(analysis)

        return analyzed

    def _categorize_objection(self, objection: str) -> str:
        """Categoriza obje√ß√£o"""

        objection_lower = objection.lower()

        if any(word in objection_lower for word in ['tempo', 'ocupado', 'prioridade']):
            return 'tempo'
        elif any(word in objection_lower for word in ['dinheiro', 'caro', 'investimento', 'pre√ßo']):
            return 'dinheiro'
        elif any(word in objection_lower for word in ['confian√ßa', 'funciona', 'resultado', 'prova']):
            return 'confianca'
        elif any(word in objection_lower for word in ['sozinho', 'conseguir', 'tentar']):
            return 'autossuficiencia'
        elif any(word in objection_lower for word in ['ajuda', 'fraco', 'admitir']):
            return 'sinal_fraqueza'
        else:
            return 'geral'

    def _assess_objection_intensity(self, objection: str) -> str:
        """Avalia intensidade da obje√ß√£o"""

        high_intensity_words = ['nunca', 'imposs√≠vel', 'jamais', '√≥dio', 'detesto']
        medium_intensity_words = ['dif√≠cil', 'complicado', 'problema', 'preocupa√ß√£o']

        objection_lower = objection.lower()

        if any(word in objection_lower for word in high_intensity_words):
            return 'Alta'
        elif any(word in objection_lower for word in medium_intensity_words):
            return 'M√©dia'
        else:
            return 'Baixa'

    def _identify_emotional_root(self, objection: str) -> str:
        """Identifica raiz emocional da obje√ß√£o"""

        objection_lower = objection.lower()

        if any(word in objection_lower for word in ['medo', 'receio', 'ansioso']):
            return 'Medo do desconhecido'
        elif any(word in objection_lower for word in ['fracasso', 'errado', 'tentei']):
            return 'Hist√≥rico de fracassos'
        elif any(word in objection_lower for word in ['orgulho', 'sozinho', 'independente']):
            return 'Orgulho ferido'
        elif any(word in objection_lower for word in ['confian√ßa', 'd√∫vida', 'ceticismo']):
            return 'Desconfian√ßa'
        else:
            return 'Resist√™ncia geral √† mudan√ßa'

    def _estimate_frequency(self, objection: str, avatar_data: Dict[str, Any]) -> str:
        """Estima frequ√™ncia da obje√ß√£o"""

        # Baseado no perfil psicogr√°fico
        personalidade = avatar_data.get('perfil_psicografico', {}).get('personalidade', '')

        if 'conservador' in personalidade.lower():
            return 'Alta'
        elif 'cauteloso' in personalidade.lower():
            return 'M√©dia'
        else:
            return 'Baixa'

    def _map_to_universal_objections(self, analyzed_objections: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """Mapeia obje√ß√µes espec√≠ficas para universais"""

        mapped = {
            'tempo': [],
            'dinheiro': [],
            'confianca': [],
            'ocultas': []
        }

        for objection in analyzed_objections:
            category = objection['categoria']
            if category in mapped:
                mapped[category].append(objection)
            else:
                mapped['ocultas'].append(objection)

        return mapped

    def _create_counter_attacks(
        self, 
        mapped_objections: Dict[str, List[Dict[str, Any]]], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Cria contra-ataques personalizados"""

        counter_attacks = {}

        for category, objections in mapped_objections.items():
            if not objections:
                continue

            if category in self.universal_objections:
                universal_data = self.universal_objections[category]
                counter_attacks[category] = self._customize_universal_counter_attack(
                    universal_data, objections, avatar_data, context_data
                )
            elif category == 'ocultas':
                counter_attacks['ocultas'] = self._create_hidden_counter_attacks(
                    objections, avatar_data, context_data
                )

        return counter_attacks

    def _customize_universal_counter_attack(
        self, 
        universal_data: Dict[str, Any], 
        specific_objections: List[Dict[str, Any]], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Customiza contra-ataque universal"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        customized = universal_data.copy()

        # Customiza scripts para o segmento
        customized_scripts = []
        for script in universal_data['scripts']:
            if '[per√≠odo]' in script:
                script = script.replace('[per√≠odo]', 'm√™s')
            if '[problema]' in script:
                script = script.replace('[problema]', f'sua situa√ß√£o em {segmento}')
            if '[quantia espec√≠fica]' in script:
                script = script.replace('[quantia espec√≠fica]', 'R$ 5.000 em oportunidades')

            customized_scripts.append(script)

        customized['scripts_customizados'] = customized_scripts
        customized['objecoes_especificas'] = [obj['objecao_original'] for obj in specific_objections]

        return customized

    def _create_hidden_counter_attacks(
        self, 
        hidden_objections: List[Dict[str, Any]], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """Cria contra-ataques para obje√ß√µes ocultas"""

        counter_attacks = []

        for objection in hidden_objections:
            # Identifica qual obje√ß√£o oculta mais se aproxima
            best_match = self._find_best_hidden_match(objection)

            if best_match:
                counter_attack = self.hidden_objections[best_match].copy()
                counter_attack['objecao_especifica'] = objection['objecao_original']
                counter_attack['customizacao'] = self._customize_for_context(counter_attack, context_data)
                counter_attacks.append(counter_attack)

        return counter_attacks

    def _find_best_hidden_match(self, objection: Dict[str, Any]) -> Optional[str]:
        """Encontra melhor match para obje√ß√£o oculta"""

        objection_text = objection['objecao_original'].lower()

        # Mapeia palavras-chave para obje√ß√µes ocultas
        keyword_mapping = {
            'autossuficiencia': ['sozinho', 'conseguir', 'tentar', 'independente'],
            'sinal_fraqueza': ['ajuda', 'fraco', 'admitir', 'problema'],
            'medo_novo': ['hora certa', 'depois', 'futuro', 'quando'],
            'prioridades_desequilibradas': ['dinheiro', 'gasto', 'prioridade', 'investimento'],
            'autoestima_destruida': ['fracasso', 'tentei', 'n√£o consegui', 'problema sou eu']
        }

        best_match = None
        max_matches = 0

        for hidden_type, keywords in keyword_mapping.items():
            matches = sum(1 for keyword in keywords if keyword in objection_text)
            if matches > max_matches:
                max_matches = matches
                best_match = hidden_type

        return best_match if max_matches > 0 else None

    def _customize_for_context(self, counter_attack: Dict[str, Any], context_data: Dict[str, Any]) -> str:
        """Customiza contra-ataque para contexto"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        return f"Customizado para {segmento}: {counter_attack['contra_ataque']}"

    def _generate_personalized_scripts(
        self, 
        counter_attacks: Dict[str, Any], 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, List[str]]:
        """Gera scripts personalizados usando IA"""

        try:
            segmento = context_data.get('segmento', 'neg√≥cios')
            personalidade = avatar_data.get('perfil_psicografico', {}).get('personalidade', '')

            prompt = f"""
Crie scripts personalizados para neutralizar obje√ß√µes no segmento {segmento}.

PERFIL DO AVATAR:
- Personalidade: {personalidade}
- Principais dores: {avatar_data.get('dores_viscerais', [])[:3]}
- Linguagem: {avatar_data.get('linguagem_interna', {})}

OBJE√á√ïES IDENTIFICADAS:
{json.dumps(counter_attacks, indent=2, ensure_ascii=False)[:1000]}

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "scripts_tempo": [
    "Script 1 personalizado para obje√ß√£o de tempo",
    "Script 2 personalizado para obje√ß√£o de tempo"
  ],
  "scripts_dinheiro": [
    "Script 1 personalizado para obje√ß√£o de dinheiro",
    "Script 2 personalizado para obje√ß√£o de dinheiro"
  ],
  "scripts_confianca": [
    "Script 1 personalizado para obje√ß√£o de confian√ßa",
    "Script 2 personalizado para obje√ß√£o de confian√ßa"
  ],
  "scripts_emergencia": [
    "Script de emerg√™ncia 1",
    "Script de emerg√™ncia 2"
  ]
}}
```
"""

            response = self.ai_manager.generate_analysis(prompt, max_tokens=1500)

            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()

                try:
                    scripts = json.loads(clean_response)
                    logger.info("‚úÖ Scripts personalizados gerados com IA")
                    return scripts
                except json.JSONDecodeError:
                    logger.warning("‚ö†Ô∏è IA retornou JSON inv√°lido para scripts")

            # Fallback para scripts b√°sicos
            return self._create_basic_scripts(avatar_data, context_data)

        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico ao gerar scripts personalizados: {str(e)}")
            salvar_erro("scripts_personalizados", e, contexto=context_data)
            # Retorna scripts b√°sicos em vez de falhar
            return self._create_basic_scripts(avatar_data, context_data)

    def _create_basic_counter_attacks(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria contra-ataques b√°sicos como fallback"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        return {
            "tempo": {
                "objecao": "N√£o tenho tempo para implementar isso agora",
                "contra_ataque": f"Cada m√™s sem otimizar {segmento} custa oportunidades valiosas",
                "scripts_customizados": [
                    f"Profissionais de {segmento} que adiaram mudan√ßas perderam market share",
                    f"O tempo que voc√™ gasta 'pensando' seus concorrentes usam para agir"
                ]
            },
            "dinheiro": {
                "objecao": "N√£o tenho or√ßamento dispon√≠vel no momento", 
                "contra_ataque": f"O custo de n√£o investir em {segmento} √© maior que o investimento",
                "scripts_customizados": [
                    f"ROI m√©dio em {segmento} com m√©todo correto: 300-500% em 12 meses",
                    f"Cada m√™s sem sistema custa mais que o investimento total"
                ]
            },
            "confianca": {
                "objecao": "Preciso de mais garantias de que funciona",
                "contra_ataque": f"Metodologia testada com profissionais de {segmento}",
                "scripts_customizados": [
                    f"Mais de 200 profissionais de {segmento} j√° aplicaram com sucesso",
                    f"Garantia espec√≠fica para {segmento}: resultados em 60 dias"
                ]
            }
        }

    def _validate_script_quality(self, scripts: Dict[str, List[str]], context_data: Dict[str, Any]) -> bool:
        """Valida qualidade dos scripts gerados"""
        segmento = context_data.get('segmento', '')

        if not scripts or len(scripts) < 3:
            logger.error("‚ùå Scripts insuficientes gerados")
            return False

        total_content = 0
        for category, script_list in scripts.items():
            if not script_list or len(script_list) < 2:
                logger.error(f"‚ùå Categoria {category} com scripts insuficientes")
                return False

            for script in script_list:
                if len(script) < 50:  # Scripts muito curtos
                    logger.error(f"‚ùå Script muito curto: {script[:30]}...")
                    return False
                total_content += len(script)

        if total_content < 1000:  # M√≠nimo de conte√∫do total
            logger.error(f"‚ùå Scripts anti-obje√ß√£o muito curtos: {total_content} caracteres. M√≠nimo: 1000")
            return False

        # Verifica se h√° men√ß√£o ao segmento espec√≠fico
        segment_mentioned = False
        for script_list in scripts.values():
            for script in script_list:
                if segmento.lower() in script.lower():
                    segment_mentioned = True
                    break
            if segment_mentioned:
                break

        if not segment_mentioned and segmento:
            logger.warning(f"‚ö†Ô∏è Scripts n√£o mencionam segmento espec√≠fico: {segmento}")

        return "A √∫nica diferen√ßa entre voc√™ e quem j√° conseguiu √© a decis√£o de agir"

    def _customize_universal_objections(
        self, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Customiza obje√ß√µes universais para o contexto"""

        customized = {}

        for category, objection_data in self.universal_objections.items():
            customized[category] = objection_data.copy()

            # Customiza para o segmento
            segmento = context_data.get('segmento', 'neg√≥cios')
            customized[category]['contexto_segmento'] = segmento

            # Adiciona exemplos espec√≠ficos
            customized[category]['exemplos_especificos'] = self._create_specific_examples(
                category, avatar_data, context_data
            )

        return customized

    def _identify_hidden_objections(self, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Identifica obje√ß√µes ocultas baseadas no avatar"""

        identified = {}

        # Analisa perfil para identificar obje√ß√µes ocultas prov√°veis
        personalidade = avatar_data.get('perfil_psicografico', {}).get('personalidade', '').lower()
        valores = avatar_data.get('perfil_psicografico', {}).get('valores', '').lower()

        # Autossufici√™ncia
        if any(trait in personalidade for trait in ['independente', 'autoconfiante', 'determinado']):
            identified['autossuficiencia'] = self.hidden_objections['autossuficiencia'].copy()
            identified['autossuficiencia']['probabilidade'] = 'Alta'

        # Sinal de fraqueza
        if any(trait in valores for trait in ['imagem', 'status', 'reconhecimento']):
            identified['sinal_fraqueza'] = self.hidden_objections['sinal_fraqueza'].copy()
            identified['sinal_fraqueza']['probabilidade'] = 'M√©dia'

        # Medo do novo
        if any(trait in personalidade for trait in ['conservador', 'cauteloso', 'tradicional']):
            identified['medo_novo'] = self.hidden_objections['medo_novo'].copy()
            identified['medo_novo']['probabilidade'] = 'Alta'

        return identified

    def _create_specific_examples(
        self, 
        category: str, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> List[str]:
        """Cria exemplos espec√≠ficos para cada categoria"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        examples = {
            'tempo': [
                f"Cada m√™s sem otimizar {segmento} = R$ 10.000 em oportunidades perdidas",
                f"Profissionais de {segmento} que adiaram mudan√ßas perderam 40% do market share"
            ],
            'dinheiro': [
                f"R$ 200/m√™s em ferramentas vs R$ 2.000 uma vez para dominar {segmento}",
                f"ROI m√©dio em {segmento} com m√©todo correto: 500% em 12 meses"
            ],
            'confianca': [
                f"Mais de 500 profissionais de {segmento} j√° aplicaram com sucesso",
                f"Garantia espec√≠fica para {segmento}: resultados em 60 dias ou dinheiro de volta"
            ]
        }

        return examples.get(category, [f"Exemplo espec√≠fico para {category} em {segmento}"])

    def _create_emergency_arsenal(
        self, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> List[str]:
        """Cria arsenal de emerg√™ncia para obje√ß√µes de √∫ltima hora"""

        return [
            "Vamos ser honestos: voc√™ vai continuar adiando at√© quando?",
            "A √∫nica diferen√ßa entre voc√™ e quem j√° conseguiu √© a decis√£o de agir",
            "Quantas oportunidades voc√™ j√° perdeu por 'pensar demais'?",
            "O medo de errar est√° te impedindo de acertar",
            "Voc√™ prefere o arrependimento de ter tentado ou de n√£o ter tentado?",
            "Cada 'n√£o' que voc√™ diz para evolu√ß√£o √© um 'sim' para estagna√ß√£o",
            "O tempo que voc√™ est√° perdendo pensando, outros est√£o usando para agir",
            "Sua zona de conforto √© uma pris√£o disfar√ßada de seguran√ßa"
        ]

    def _create_neutralization_sequence(self, mapped_objections: Dict[str, List[Dict[str, Any]]]) -> List[str]:
        """Cria sequ√™ncia de neutraliza√ß√£o"""

        return [
            "1. IDENTIFICAR: Qual obje√ß√£o est√° sendo verbalizada ou sinalizada",
            "2. CONCORDAR: Validar a preocupa√ß√£o como leg√≠tima",
            "3. VALORIZAR: Mostrar que pessoas inteligentes pensam assim",
            "4. APRESENTAR: Oferecer nova perspectiva ou solu√ß√£o",
            "5. CONFIRMAR: Verificar se a obje√ß√£o foi neutralizada",
            "6. ANCORAR: Refor√ßar a nova cren√ßa instalada"
        ]

    def _create_effectiveness_metrics(self) -> Dict[str, Any]:
        """Cria m√©tricas de efic√°cia do sistema"""

        return {
            'indicadores_neutralizacao': [
                'Mudan√ßa na linguagem corporal (abertura)',
                'Perguntas sobre pr√≥ximos passos',
                'Redu√ß√£o de questionamentos',
                'Concord√¢ncia verbal ou f√≠sica'
            ],
            'sinais_resistencia_persistente': [
                'Repeti√ß√£o da mesma obje√ß√£o',
                'Mudan√ßa de assunto',
                'Linguagem corporal fechada',
                'Questionamentos t√©cnicos excessivos'
            ],
            'metricas_conversao': {
                'pre_neutralizacao': 'Taxa de convers√£o antes do sistema',
                'pos_neutralizacao': 'Taxa de convers√£o ap√≥s aplica√ß√£o',
                'tempo_medio_neutralizacao': 'Tempo m√©dio para neutralizar obje√ß√£o',
                'objecoes_mais_resistentes': 'Ranking das obje√ß√µes mais dif√≠ceis'
            }
        }

    def _generate_fallback_anti_objection_system(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera sistema anti-obje√ß√£o b√°sico como fallback"""

        segmento = context_data.get('segmento', 'neg√≥cios')

        return {
            "objecoes_universais": {
                "tempo": {
                    "objecao": "N√£o tenho tempo para implementar isso agora",
                    "contra_ataque": f"Cada m√™s sem otimizar {segmento} custa oportunidades valiosas",
                    "scripts_customizados": [
                        f"Profissionais de {segmento} que adiaram mudan√ßas perderam market share",
                        f"O tempo que voc√™ gasta 'pensando' seus concorrentes usam para agir"
                    ]
                },
                "dinheiro": {
                    "objecao": "N√£o tenho or√ßamento dispon√≠vel no momento",
                    "contra_ataque": f"O custo de n√£o investir em {segmento} √© maior que o investimento",
                    "scripts_customizados": [
                        f"ROI m√©dio em {segmento} com m√©todo correto: 300-500% em 12 meses",
                        f"Cada m√™s sem sistema custa mais que o investimento total"
                    ]
                },
                "confianca": {
                    "objecao": "Preciso de mais garantias de que funciona",
                    "contra_ataque": f"Metodologia testada com profissionais de {segmento}",
                    "scripts_customizados": [
                        f"Mais de 200 profissionais de {segmento} j√° aplicaram com sucesso",
                        f"Garantia espec√≠fica para {segmento}: resultados em 60 dias"
                    ]
                }
            },
            "scripts_personalizados": {
                "scripts_tempo": [
                    f"Cada dia sem otimizar {segmento} √© uma oportunidade perdida",
                    f"Seus concorrentes em {segmento} n√£o est√£o esperando voc√™ se decidir"
                ],
                "scripts_dinheiro": [
                    f"Investimento em {segmento} se paga em 2-4 meses com implementa√ß√£o correta",
                    f"O que voc√™ perde N√ÉO investindo √© maior que o valor do investimento"
                ],
                "scripts_confianca": [
                    f"Metodologia comprovada especificamente para {segmento}",
                    f"Resultados documentados de profissionais como voc√™ em {segmento}"
                ]
            },
            "validation_status": "FALLBACK_VALID",
            "generation_timestamp": time.time(),
            "fallback_mode": True
        }

    def create_comprehensive_objection_handling(self, segmento: str, produto: str, web_data: Dict = None, social_data: Dict = None) -> Dict[str, Any]:
        """Cria sistema completo de tratamento de obje√ß√µes"""
        try:
            prompt = f"""
            Crie um sistema COMPLETO de tratamento de obje√ß√µes para:

            SEGMENTO: {segmento}
            PRODUTO: {produto}
            DADOS WEB: {str(web_data)[:300] if web_data else 'N√£o dispon√≠vel'}
            DADOS SOCIAIS: {str(social_data)[:300] if social_data else 'N√£o dispon√≠vel'}

            Identifique e trate as seguintes obje√ß√µes espec√≠ficas deste segmento:

            1. OBJE√á√ïES DE PRE√áO/INVESTIMENTO
            2. OBJE√á√ïES DE TEMPO/DISPONIBILIDADE
            3. OBJE√á√ïES DE CREDIBILIDADE/CONFIAN√áA
            4. OBJE√á√ïES T√âCNICAS/FUNCIONAIS
            5. OBJE√á√ïES DE NECESSIDADE/PRIORIDADE
            6. OBJE√á√ïES DE TIMING/MOMENTO
            7. OBJE√á√ïES DE AUTORIDADE/DECIS√ÉO
            8. OBJE√á√ïES DE EXPERI√äNCIA ANTERIOR
            9. OBJE√á√ïES DE CONCORR√äNCIA
            10. OBJE√á√ïES DE COMPLEXIDADE

            Para cada obje√ß√£o:
            - Frase exata que o cliente usaria
            - Resposta persuasiva espec√≠fica
            - Prova/evid√™ncia de apoio
            - T√©cnica psicol√≥gica aplicada
            - Script de reframe

            Formato JSON detalhado.
            """

            response = self.ai_manager.generate_content(prompt, max_tokens=4000)

            import json
            try:
                objection_data = json.loads(response)
                return objection_data
            except json.JSONDecodeError:
                return self._create_fallback_objections(segmento, produto)

        except Exception as e:
            logger.error(f"‚ùå Erro ao criar sistema anti-obje√ß√£o: {e}")
            return self._create_fallback_objections(segmento, produto)

    def _create_fallback_objections(self, segmento: str, produto: str) -> Dict[str, Any]:
        """Cria sistema de obje√ß√µes de fallback"""
        return {
            "objecoes_preco": {
                "objecao": "Est√° muito caro para o meu or√ßamento atual",
                "resposta": f"Entendo sua preocupa√ß√£o. O investimento em {produto} se paga rapidamente. Na verdade, o custo de N√ÉO ter essa solu√ß√£o √© muito maior.",
                "prova": "Casos de ROI espec√≠ficos do segmento",
                "tecnica": "Reframe de custo para investimento",
                "script": f"Veja, no {segmento}, clientes que esperaram para investir perderam em m√©dia X% de oportunidades..."
            },
            "objecoes_tempo": {
                "objecao": "N√£o tenho tempo para implementar isso agora",
                "resposta": f"Justamente por isso {produto} foi criado - para ECONOMIZAR seu tempo, n√£o consumir mais.",
                "prova": "Estudos de tempo de implementa√ß√£o vs economia",
                "tecnica": "Invers√£o da obje√ß√£o",
                "script": "O tempo que voc√™ 'n√£o tem' agora vai se multiplicar quando implementar..."
            },
            "objecoes_credibilidade": {
                "objecao": "Como sei que isso realmente funciona?",
                "resposta": f"Excelente pergunta. Temos mais de X clientes no {segmento} com resultados comprovados.",
                "prova": "Estudos de caso espec√≠ficos, depoimentos, m√©tricas",
                "tecnica": "Prova social + evid√™ncia",
                "script": "Posso te mostrar exatamente os resultados de clientes similares a voc√™..."
            },
            "objecoes_tecnicas": {
                "objecao": "Parece muito complexo para nossa realidade",
                "resposta": f"{produto} foi desenhado especificamente para {segmento} - √© simples e direto.",
                "prova": "Demonstra√ß√µes de facilidade, onboarding simplificado",
                "tecnica": "Simplifica√ß√£o + especificidade",
                "script": "Na verdade, √© o oposto - simplificamos tudo para funcionar perfeitamente no seu contexto..."
            },
            "objecoes_necessidade": {
                "objecao": "N√£o sei se realmente preciso disso agora",
                "resposta": f"No {segmento}, quem n√£o age agora fica para tr√°s. O mercado n√£o espera.",
                "prova": "Dados de mercado, tend√™ncias, concorr√™ncia",
                "tecnica": "Urg√™ncia + FOMO",
                "script": "Seus concorrentes j√° est√£o investindo nisso. A quest√£o √©: voc√™ quer liderar ou seguir?"
            },
            "objecoes_timing": {
                "objecao": "Talvez seja melhor esperar um momento melhor",
                "resposta": "O melhor momento foi ontem. O segundo melhor momento √© agora.",
                "prova": "An√°lise de timing de mercado",
                "tecnica": "Autoridade + urg√™ncia",
                "script": "Analisando o mercado, nunca houve momento melhor para implementar..."
            },
            "objecoes_autoridade": {
                "objecao": "Preciso consultar outras pessoas antes",
                "resposta": f"Claro, decis√µes importantes no {segmento} merecem an√°lise. Que tal levarmos os dados juntos?",
                "prova": "Materiais para apresenta√ß√£o interna",
                "tecnica": "Facilita√ß√£o + colabora√ß√£o",
                "script": "Posso preparar uma apresenta√ß√£o espec√≠fica para sua equipe..."
            },
            "objecoes_experiencia": {
                "objecao": "J√° tentei algo parecido e n√£o funcionou",
                "resposta": f"Entendo. {produto} √© diferente justamente porque foi criado aprendendo com esses erros.",
                "prova": "Diferencia√ß√µes claras, evolu√ß√£o da solu√ß√£o",
                "tecnica": "Valida√ß√£o + diferencia√ß√£o",
                "script": "Essa experi√™ncia anterior √© valiosa. Deixe-me mostrar exatamente como evitamos esses problemas..."
            },
            "objecoes_concorrencia": {
                "objecao": "Estou considerando outras op√ß√µes do mercado",
                "resposta": f"Inteligente comparar. Quando analisar, veja que somos os √∫nicos que X, Y, Z no {segmento}.",
                "prova": "Tabela comparativa detalhada",
                "tecnica": "Diferencia√ß√£o competitiva",
                "script": "Posso te mostrar uma compara√ß√£o lado a lado para voc√™ decidir com dados..."
            },
            "objecoes_complexidade": {
                "objecao": "Parece muito complicado de entender/usar",
                "resposta": f"Apar√™ncia pode enganar. {produto} √© sofisticado por dentro, simples por fora.",
                "prova": "Demonstra√ß√£o ao vivo, tutoriais simples",
                "tecnica": "Demonstra√ß√£o + simplifica√ß√£o",
                "script": "Deixe-me mostrar como √© simples na pr√°tica..."
            },
            "estrategias_gerais": {
                "tecnica_escuta_ativa": "Sempre validar o sentimento antes de responder",
                "tecnica_reframe": "Transformar obje√ß√£o em oportunidade de demonstrar valor",
                "tecnica_prova": "Sempre ter evid√™ncia espec√≠fica para cada obje√ß√£o",
                "tecnica_pergunta": "Usar perguntas para entender a obje√ß√£o real",
                "tecnica_historia": "Contar casos similares que superaram a mesma obje√ß√£o"
            }
        }

# Inst√¢ncia global
anti_objection_system = AntiObjectionSystem()