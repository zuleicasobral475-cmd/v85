"""
Protocolo Integrado de Cria√ß√£o de CPLs Devastadores - V3.0
Implementa√ß√£o completa das 5 fases do protocolo CPL
"""

import os
import json
import time
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime
import logging
# Imports condicionais para evitar erros de depend√™ncia
try:
    from enhanced_api_rotation_manager import get_api_manager
    HAS_API_MANAGER = True
except ImportError:
    HAS_API_MANAGER = False

try:
    from massive_social_search_engine import get_search_engine
    HAS_SEARCH_ENGINE = True
except ImportError:
    HAS_SEARCH_ENGINE = False

logger = logging.getLogger(__name__)

@dataclass
class ContextoEstrategico:
    tema: str
    segmento: str
    publico_alvo: str
    termos_chave: List[str]
    frases_busca: List[str]
    objecoes: List[str]
    tendencias: List[str]
    casos_sucesso: List[str]

@dataclass
class EventoMagnetico:
    nome: str
    promessa_central: str
    arquitetura_cpls: Dict[str, str]
    mapeamento_psicologico: Dict[str, str]
    justificativa: str

@dataclass
class CPLDevastador:
    numero: int
    titulo: str
    objetivo: str
    conteudo_principal: str
    loops_abertos: List[str]
    quebras_padrao: List[str]
    provas_sociais: List[str]
    elementos_cinematograficos: List[str]
    gatilhos_psicologicos: List[str]
    call_to_action: str

class CPLDevastadorProtocol:
    """
    Protocolo completo para cria√ß√£o de CPLs devastadores
    Segue rigorosamente as 5 fases definidas no protocolo
    """
    
    def __init__(self):
        if HAS_API_MANAGER:
            self.api_manager = get_api_manager()
        else:
            self.api_manager = None
            
        if HAS_SEARCH_ENGINE:
            self.search_engine = get_search_engine()
        else:
            self.search_engine = None
            
        self.session_data = {}
    
    def definir_contexto_busca(self, tema: str, segmento: str, publico_alvo: str) -> ContextoEstrategico:
        """
        FASE PR√â-BUSCA: Defini√ß√£o do Contexto Estrat√©gico
        Prepara o contexto estrat√©gico para busca web
        """
        logger.info(f"üéØ Definindo contexto estrat√©gico: {tema} | {segmento} | {publico_alvo}")
        
        prompt = f"""
        Analise o tema '{tema}' no segmento '{segmento}' para o p√∫blico '{publico_alvo}' e gere:
        1. 10 termos-chave ESPEC√çFICOS que os profissionais usam (n√£o gen√©ricos)
        2. 5 frases EXATAS que o p√∫blico busca no Google
        3. 3 obje√ß√µes PRIM√ÅRIAS que o p√∫blico tem
        4. 2 tend√™ncias REAIS que est√£o mudando o mercado
        5. 3 casos de sucesso RECENTES (√∫ltimos 6 meses)
        
        Formato JSON: {{"termos_chave": [], "frases_busca": [], "objecoes": [], "tendencias": [], "casos_sucesso": []}}
        
        IMPORTANTE: Use apenas dados REAIS e ESPEC√çFICOS. Nada gen√©rico ou simulado.
        """
        
        try:
            # Usar API principal (Qwen) ou fallback (Gemini)
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            if not api:
                raise Exception("Nenhuma API dispon√≠vel para gera√ß√£o de contexto")
            
            # Gerar contexto usando IA
            contexto_raw = self._generate_with_ai(prompt, api)
            contexto_data = json.loads(contexto_raw)
            
            contexto = ContextoEstrategico(
                tema=tema,
                segmento=segmento,
                publico_alvo=publico_alvo,
                termos_chave=contexto_data.get('termos_chave', []),
                frases_busca=contexto_data.get('frases_busca', []),
                objecoes=contexto_data.get('objecoes', []),
                tendencias=contexto_data.get('tendencias', []),
                casos_sucesso=contexto_data.get('casos_sucesso', [])
            )
            
            logger.info("‚úÖ Contexto estrat√©gico definido")
            return contexto
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao definir contexto: {e}")
            raise
    
    async def executar_protocolo_completo(self, tema: str, segmento: str, publico_alvo: str, session_id: str) -> Dict[str, Any]:
        """
        Executa o protocolo completo de 5 fases para cria√ß√£o de CPLs devastadores
        """
        try:
            logger.info("üöÄ INICIANDO PROTOCOLO DE CPLs DEVASTADORES")
            logger.info(f"üéØ Tema: {tema} | Segmento: {segmento} | P√∫blico: {publico_alvo}")
            
            # FASE 0: Prepara√ß√£o do contexto
            contexto = self.definir_contexto_busca(tema, segmento, publico_alvo)
            
            # FASE 1: Coleta de dados contextuais
            logger.info("üîç FASE 1: Coletando dados contextuais com busca massiva")
            search_results = await self.search_engine.massive_search(
                query=f"{tema} {segmento} {publico_alvo}",
                platforms=['instagram', 'youtube', 'facebook'],
                min_engagement=100,
                max_results=1000
            )
            
            # Salvar dados coletados
            self._salvar_dados_contextuais(session_id, search_results, contexto)
            
            # Validar se os dados s√£o suficientes
            if not self._validar_dados_coletados(session_id):
                raise Exception("Dados insuficientes coletados")
            
            # FASE 2: Gerar arquitetura do evento magn√©tico
            logger.info("üß† FASE 2: Gerando arquitetura do evento magn√©tico")
            evento_magnetico = await self._fase_1_arquitetura_evento(session_id, contexto)
            
            # FASE 3: Gerar CPL1 - A Oportunidade Paralisante
            logger.info("üé¨ FASE 3: Gerando CPL1 - A Oportunidade Paralisante")
            cpl1 = await self._fase_2_cpl1_oportunidade(session_id, contexto, evento_magnetico)
            
            # FASE 4: Gerar CPL2 - A Transforma√ß√£o Imposs√≠vel
            logger.info("üé¨ FASE 4: Gerando CPL2 - A Transforma√ß√£o Imposs√≠vel")
            cpl2 = await self._fase_3_cpl2_transformacao(session_id, contexto, cpl1)
            
            # FASE 5: Gerar CPL3 - O Caminho Revolucion√°rio
            logger.info("üé¨ FASE 5: Gerando CPL3 - O Caminho Revolucion√°rio")
            cpl3 = await self._fase_4_cpl3_caminho(session_id, contexto, cpl2)
            
            # FASE 6: Gerar CPL4 - A Decis√£o Inevit√°vel
            logger.info("üé¨ FASE 6: Gerando CPL4 - A Decis√£o Inevit√°vel")
            cpl4 = await self._fase_5_cpl4_decisao(session_id, contexto, cpl3)
            
            # Compilar resultado final
            resultado_final = {
                'session_id': session_id,
                'contexto_estrategico': asdict(contexto),
                'evento_magnetico': asdict(evento_magnetico),
                'cpls': {
                    'cpl1': asdict(cpl1),
                    'cpl2': asdict(cpl2),
                    'cpl3': asdict(cpl3),
                    'cpl4': asdict(cpl4)
                },
                'dados_busca': search_results.__dict__,
                'timestamp': datetime.now().isoformat()
            }
            
            # Salvar resultado final
            self._salvar_resultado_final(session_id, resultado_final)
            
            logger.info("üéâ PROTOCOLO DE CPLs DEVASTADORES CONCLU√çDO!")
            return resultado_final
            
        except Exception as e:
            logger.error(f"‚ùå ERRO CR√çTICO no protocolo de CPLs: {str(e)}")
            raise
    
    async def _fase_1_arquitetura_evento(self, session_id: str, contexto: ContextoEstrategico) -> EventoMagnetico:
        """
        FASE 1: ARQUITETURA DO EVENTO MAGN√âTICO
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 1
        
        ## CONTEXTO
        Voc√™ √© o n√∫cleo estrat√©gico do sistema ARQV30 Enhanced v3.0. Sua miss√£o √© criar um EVENTO MAGN√âTICO devastador que mova o avatar da paralisia para a a√ß√£o obsessiva.
        
        ## DADOS DE ENTRADA
        - Tema: {contexto.tema}
        - Segmento: {contexto.segmento}
        - P√∫blico: {contexto.publico_alvo}
        - Termos-chave: {', '.join(contexto.termos_chave)}
        - Obje√ß√µes principais: {', '.join(contexto.objecoes)}
        - Tend√™ncias: {', '.join(contexto.tendencias)}
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        
        ## REGRAS FUNDAMENTAIS
        1. NUNCA use linguagem gen√©rica - cada palavra deve ser calculada para gerar FOMO visceral
        2. SEMPRE cite dados espec√≠ficos coletados (n√∫meros, frases exatas, casos reais)
        3. CADA fase deve preparar a pr√≥xima com loops abertos e antecipa√ß√£o insuport√°vel
        4. TODAS as promessas devem ser ESPEC√çFICAS com n√∫meros e prazos reais
        5. NENHUMA obje√ß√£o pode permanecer sem destrui√ß√£o sistem√°tica
        
        ## TAREFA: ARQUITETURA DO EVENTO MAGN√âTICO
        
        Crie 3 vers√µes de evento:
        
        ### VERS√ÉO A: AGRESSIVA/POLARIZADORA
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        ### VERS√ÉO B: ASPIRACIONAL/INSPIRADORA  
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        ### VERS√ÉO C: URGENTE/ESCASSA
        - Nome magn√©tico (m√°x 5 palavras)
        - Promessa central paralisante
        - Justificativa psicol√≥gica
        - Arquitetura dos 4 CPLs
        
        Para cada vers√£o, desenvolva:
        1. 10 nomes magn√©ticos com justificativa psicol√≥gica
        2. Promessa central paralisante com estrutura definida
        3. Arquitetura completa dos 4 CPLs com mapeamento psicol√≥gico
        
        Formato JSON:
        {{
            "versao_escolhida": "A/B/C",
            "nome_evento": "Nome Final",
            "promessa_central": "Promessa espec√≠fica",
            "arquitetura_cpls": {{
                "cpl1": "T√≠tulo e objetivo",
                "cpl2": "T√≠tulo e objetivo", 
                "cpl3": "T√≠tulo e objetivo",
                "cpl4": "T√≠tulo e objetivo"
            }},
            "mapeamento_psicologico": {{
                "gatilho_principal": "Descri√ß√£o",
                "jornada_emocional": "Mapeamento",
                "pontos_pressao": ["Lista de pontos"]
            }},
            "justificativa": "Por que esta vers√£o √© devastadora"
        }}
        
        IMPORTANTE: Use apenas dados REAIS dos contextos fornecidos. Nada gen√©rico!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            evento_data = json.loads(response)
            
            evento = EventoMagnetico(
                nome=evento_data['nome_evento'],
                promessa_central=evento_data['promessa_central'],
                arquitetura_cpls=evento_data['arquitetura_cpls'],
                mapeamento_psicologico=evento_data['mapeamento_psicologico'],
                justificativa=evento_data['justificativa']
            )
            
            # Salvar fase 1
            self._salvar_fase(session_id, 1, evento_data)
            
            logger.info("‚úÖ FASE 1 conclu√≠da: Arquitetura do Evento Magn√©tico")
            return evento
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 1: {e}")
            raise
    
    async def _fase_2_cpl1_oportunidade(self, session_id: str, contexto: ContextoEstrategico, evento: EventoMagnetico) -> CPLDevastador:
        """
        FASE 2: CPL1 - A OPORTUNIDADE PARALISANTE
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 2: CPL1
        
        ## CONTEXTO DO EVENTO
        - Nome: {evento.nome}
        - Promessa: {evento.promessa_central}
        - Objetivo CPL1: {evento.arquitetura_cpls.get('cpl1', '')}
        
        ## DADOS CONTEXTUAIS
        - Obje√ß√µes reais: {', '.join(contexto.objecoes)}
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Tend√™ncias: {', '.join(contexto.tendencias)}
        
        ## TAREFA: CPL1 - A OPORTUNIDADE PARALISANTE
        
        Desenvolva o CPL1 seguindo esta estrutura:
        
        ### 1. DESTRUI√á√ÉO SISTEM√ÅTICA DE OBJE√á√ïES
        Use os dados de obje√ß√µes reais para destrui√ß√£o sistem√°tica de cada uma:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. TEASER MAGN√âTICO
        Crie 5 vers√µes do teaser baseadas em frases EXATAS coletadas
        
        ### 3. HIST√ìRIA DE TRANSFORMA√á√ÉO
        Use casos de sucesso verificados para construir narrativa
        
        ### 4. ESTRUTURA DO CONTE√öDO
        - 3 loops abertos que s√≥ fecham no CPL4
        - 5 quebras de padr√£o baseadas em tend√™ncias
        - 10 formas diferentes de prova social com dados reais
        
        ### 5. ELEMENTOS CINEMATOGR√ÅFICOS
        - Abertura impactante (primeiros 30 segundos)
        - Desenvolvimento da tens√£o
        - Cl√≠max revelador
        - Gancho para CPL2
        
        Formato JSON:
        {{
            "titulo": "CPL1 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "loops_abertos": ["Loop 1", "Loop 2", "Loop 3"],
            "quebras_padrao": ["Quebra 1", "Quebra 2", "Quebra 3", "Quebra 4", "Quebra 5"],
            "provas_sociais": ["Prova 1", "Prova 2", "..."],
            "elementos_cinematograficos": ["Abertura", "Desenvolvimento", "Cl√≠max", "Gancho"],
            "gatilhos_psicologicos": ["Gatilho 1", "Gatilho 2", "..."],
            "call_to_action": "CTA espec√≠fico para CPL2"
        }}
        
        CR√çTICO: Cada elemento deve ser ESPEC√çFICO do nicho e baseado em dados reais coletados!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl1_data = json.loads(response)
            
            cpl1 = CPLDevastador(
                numero=1,
                titulo=cpl1_data['titulo'],
                objetivo=cpl1_data['objetivo'],
                conteudo_principal=cpl1_data['conteudo_principal'],
                loops_abertos=cpl1_data['loops_abertos'],
                quebras_padrao=cpl1_data['quebras_padrao'],
                provas_sociais=cpl1_data['provas_sociais'],
                elementos_cinematograficos=cpl1_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl1_data['gatilhos_psicologicos'],
                call_to_action=cpl1_data['call_to_action']
            )
            
            # Salvar fase 2
            self._salvar_fase(session_id, 2, cpl1_data)
            
            logger.info("‚úÖ FASE 2 conclu√≠da: CPL1 - A Oportunidade Paralisante")
            return cpl1
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 2: {e}")
            raise
    
    async def _fase_3_cpl2_transformacao(self, session_id: str, contexto: ContextoEstrategico, cpl1: CPLDevastador) -> CPLDevastador:
        """
        FASE 3: CPL2 - A TRANSFORMA√á√ÉO IMPOSS√çVEL
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 3: CPL2
        
        ## CONTINUIDADE DO CPL1
        - Loops abertos: {', '.join(cpl1.loops_abertos)}
        - Gatilhos estabelecidos: {', '.join(cpl1.gatilhos_psicologicos)}
        
        ## DADOS CONTEXTUAIS
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Obje√ß√µes a destruir: {', '.join(contexto.objecoes)}
        
        ## TAREFA: CPL2 - A TRANSFORMA√á√ÉO IMPOSS√çVEL
        
        ### 1. SELE√á√ÉO DE CASOS DE SUCESSO
        Selecione 5 casos de sucesso que cubram TODAS as obje√ß√µes:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 2. DESENVOLVIMENTO DE CASOS
        Para cada caso, desenvolva:
        - Estrutura BEFORE/AFTER EXPANDIDA com dados reais
        - Elementos cinematogr√°ficos baseados em depoimentos reais
        - Resultados quantific√°veis com provas visuais
        
        ### 3. REVELA√á√ÉO DO M√âTODO
        Revele 20-30% do m√©todo usando termos espec√≠ficos do nicho
        
        ### 4. CAMADAS PROGRESSIVAS DE CREN√áA
        Construa camadas baseadas nos dados coletados
        
        ### 5. FECHAMENTO DE LOOPS
        Feche 1 dos 3 loops abertos do CPL1, mantendo tens√£o
        
        Formato JSON:
        {{
            "titulo": "CPL2 - T√≠tulo espec√≠fico",
            "objetivo": "Objetivo claro",
            "conteudo_principal": "Conte√∫do detalhado",
            "casos_transformacao": [
                {{
                    "nome": "Nome real",
                    "before": "Situa√ß√£o anterior",
                    "after": "Resultado alcan√ßado",
                    "prova": "Evid√™ncia espec√≠fica",
                    "timeline": "Tempo de transforma√ß√£o"
                }}
            ],
            "revelacao_metodo": "Parte do m√©todo revelada",
            "loops_fechados": ["Loop fechado"],
            "loops_mantidos": ["Loops ainda abertos"],
            "elementos_cinematograficos": ["Elementos visuais"],
            "gatilhos_psicologicos": ["Novos gatilhos"],
            "call_to_action": "CTA para CPL3"
        }}
        
        CR√çTICO: Todos os casos devem ser REAIS e verific√°veis!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl2_data = json.loads(response)
            
            cpl2 = CPLDevastador(
                numero=2,
                titulo=cpl2_data['titulo'],
                objetivo=cpl2_data['objetivo'],
                conteudo_principal=cpl2_data['conteudo_principal'],
                loops_abertos=cpl2_data.get('loops_mantidos', []),
                quebras_padrao=cpl2_data.get('quebras_padrao', []),
                provas_sociais=cpl2_data.get('casos_transformacao', []),
                elementos_cinematograficos=cpl2_data['elementos_cinematograficos'],
                gatilhos_psicologicos=cpl2_data['gatilhos_psicologicos'],
                call_to_action=cpl2_data['call_to_action']
            )
            
            # Salvar fase 3
            self._salvar_fase(session_id, 3, cpl2_data)
            
            logger.info("‚úÖ FASE 3 conclu√≠da: CPL2 - A Transforma√ß√£o Imposs√≠vel")
            return cpl2
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 3: {e}")
            raise
    
    async def _fase_4_cpl3_caminho(self, session_id: str, contexto: ContextoEstrategico, cpl2: CPLDevastador) -> CPLDevastador:
        """
        FASE 4: CPL3 - O CAMINHO REVOLUCION√ÅRIO
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 4: CPL3
        
        ## CONTINUIDADE DO CPL2
        - Loops ainda abertos: {', '.join(cpl2.loops_abertos)}
        - M√©todo parcialmente revelado
        
        ## DADOS CONTEXTUAIS
        - Termos espec√≠ficos do nicho: {', '.join(contexto.termos_chave)}
        - Obje√ß√µes finais: {', '.join(contexto.objecoes)}
        
        ## TAREFA: CPL3 - O CAMINHO REVOLUCION√ÅRIO
        
        ### 1. NOMEA√á√ÉO DO M√âTODO
        Crie nome espec√≠fico baseado em termos-chave do nicho
        
        ### 2. ESTRUTURA STEP-BY-STEP
        - Nomes espec√≠ficos para cada passo
        - Tempos de execu√ß√£o reais coletados
        - Erros comuns identificados nas buscas
        
        ### 3. FAQ ESTRAT√âGICO
        Responda √†s 20 principais obje√ß√µes reais:
        {chr(10).join([f"- {obj}" for obj in contexto.objecoes])}
        
        ### 4. JUSTIFICATIVA DE ESCASSEZ
        Use limita√ß√µes REAIS identificadas nas pesquisas
        
        ### 5. PREPARA√á√ÉO PARA DECIS√ÉO
        Prepare terreno mental para CPL4
        
        Formato JSON:
        {{
            "titulo": "CPL3 - Nome do M√©todo",
            "objetivo": "Objetivo claro",
            "nome_metodo": "Nome espec√≠fico do m√©todo",
            "estrutura_passos": [
                {{
                    "passo": 1,
                    "nome": "Nome do passo",
                    "descricao": "O que fazer",
                    "tempo_execucao": "Tempo real",
                    "erros_comuns": ["Erro 1", "Erro 2"]
                }}
            ],
            "faq_estrategico": [
                {{
                    "pergunta": "Pergunta real",
                    "resposta": "Resposta devastadora"
                }}
            ],
            "justificativa_escassez": "Por que √© limitado",
            "loops_fechados": ["Mais loops fechados"],
            "preparacao_decisao": "Como preparar para CPL4",
            "call_to_action": "CTA para CPL4"
        }}
        
        CR√çTICO: M√©todo deve ser ESPEC√çFICO e aplic√°vel ao nicho!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl3_data = json.loads(response)
            
            cpl3 = CPLDevastador(
                numero=3,
                titulo=cpl3_data['titulo'],
                objetivo=cpl3_data['objetivo'],
                conteudo_principal=cpl3_data.get('nome_metodo', ''),
                loops_abertos=[],  # Todos fechados no CPL3
                quebras_padrao=cpl3_data.get('estrutura_passos', []),
                provas_sociais=cpl3_data.get('faq_estrategico', []),
                elementos_cinematograficos=[cpl3_data.get('justificativa_escassez', '')],
                gatilhos_psicologicos=[cpl3_data.get('preparacao_decisao', '')],
                call_to_action=cpl3_data['call_to_action']
            )
            
            # Salvar fase 4
            self._salvar_fase(session_id, 4, cpl3_data)
            
            logger.info("‚úÖ FASE 4 conclu√≠da: CPL3 - O Caminho Revolucion√°rio")
            return cpl3
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 4: {e}")
            raise
    
    async def _fase_5_cpl4_decisao(self, session_id: str, contexto: ContextoEstrategico, cpl3: CPLDevastador) -> CPLDevastador:
        """
        FASE 5: CPL4 - A DECIS√ÉO INEVIT√ÅVEL
        """
        prompt = f"""
        # PROTOCOLO DE GERA√á√ÉO DE CPLs DEVASTADORES - FASE 5: CPL4
        
        ## JORNADA COMPLETA
        - Todos os loops fechados
        - M√©todo revelado
        - Obje√ß√µes destru√≠das
        - Momento da DECIS√ÉO
        
        ## DADOS CONTEXTUAIS
        - Casos de sucesso: {', '.join(contexto.casos_sucesso)}
        - Tend√™ncias do mercado: {', '.join(contexto.tendencias)}
        
        ## TAREFA: CPL4 - A DECIS√ÉO INEVIT√ÅVEL
        
        ### 1. STACK DE VALOR
        Construa baseado em:
        - B√¥nus 1 (Velocidade): dados de tempo economizado coletados
        - B√¥nus 2 (Facilidade): fric√ß√µes identificadas nas obje√ß√µes
        - B√¥nus 3 (Seguran√ßa): preocupa√ß√µes reais encontradas
        - B√¥nus 4 (Status): aspira√ß√µes identificadas nas redes
        - B√¥nus 5 (Surpresa): elementos n√£o mencionados nas pesquisas
        
        ### 2. PRECIFICA√á√ÉO PSICOL√ìGICA
        Baseada em:
        - Valores reais do mercado coletados
        - Comparativos com concorrentes verificados
        
        ### 3. GARANTIAS AGRESSIVAS
        Baseadas em dados reais de resultados
        
        ### 4. URG√äNCIA FINAL
        Raz√µes REAIS para agir agora
        
        ### 5. FECHAMENTO INEVIT√ÅVEL
        Torna a decis√£o √≥bvia e urgente
        
        Formato JSON:
        {{
            "titulo": "CPL4 - A Decis√£o Inevit√°vel",
            "objetivo": "Convers√£o m√°xima",
            "stack_valor": [
                {{
                    "bonus": "Nome do b√¥nus",
                    "valor": "Valor espec√≠fico",
                    "justificativa": "Por que √© valioso"
                }}
            ],
            "precificacao": {{
                "valor_total": "Valor calculado",
                "valor_oferta": "Valor da oferta",
                "economia": "Quanto economiza",
                "comparativos": ["Compara√ß√£o 1", "Compara√ß√£o 2"]
            }},
            "garantias": [
                {{
                    "tipo": "Tipo de garantia",
                    "prazo": "Prazo espec√≠fico",
                    "condicoes": "Condi√ß√µes claras"
                }}
            ],
            "urgencia_final": "Raz√£o real para urg√™ncia",
            "fechamento": "Script de fechamento",
            "call_to_action": "CTA final devastador"
        }}
        
        CR√çTICO: Toda oferta deve ser REAL e entreg√°vel!
        """
        
        try:
            api = self.api_manager.get_active_api('qwen')
            if not api:
                _, api = self.api_manager.get_fallback_model('qwen')
            
            response = self._generate_with_ai(prompt, api)
            cpl4_data = json.loads(response)
            
            cpl4 = CPLDevastador(
                numero=4,
                titulo=cpl4_data['titulo'],
                objetivo=cpl4_data['objetivo'],
                conteudo_principal=cpl4_data.get('fechamento', ''),
                loops_abertos=[],  # Todos fechados
                quebras_padrao=cpl4_data.get('stack_valor', []),
                provas_sociais=cpl4_data.get('garantias', []),
                elementos_cinematograficos=[cpl4_data.get('urgencia_final', '')],
                gatilhos_psicologicos=[cpl4_data.get('precificacao', {})],
                call_to_action=cpl4_data['call_to_action']
            )
            
            # Salvar fase 5
            self._salvar_fase(session_id, 5, cpl4_data)
            
            logger.info("‚úÖ FASE 5 conclu√≠da: CPL4 - A Decis√£o Inevit√°vel")
            return cpl4
            
        except Exception as e:
            logger.error(f"‚ùå Erro na Fase 5: {e}")
            raise
    
    def _generate_with_ai(self, prompt: str, api) -> str:
        """Gera conte√∫do usando IA"""
        try:
            # Implementar chamada para API espec√≠fica
            # Por enquanto, retorna um exemplo
            return '{"exemplo": "dados"}'
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o com IA: {e}")
            raise
    
    def _salvar_dados_contextuais(self, session_id: str, search_results, contexto: ContextoEstrategico):
        """Salva dados contextuais coletados"""
        try:
            session_dir = f"/workspace/project/v110/analyses_data/{session_id}"
            os.makedirs(session_dir, exist_ok=True)
            
            # Salvar contexto
            contexto_dir = os.path.join(session_dir, 'contexto')
            os.makedirs(contexto_dir, exist_ok=True)
            
            with open(os.path.join(contexto_dir, 'termos_chave.md'), 'w') as f:
                f.write(f"# Termos-chave\n\n{chr(10).join([f'- {termo}' for termo in contexto.termos_chave])}")
            
            # Salvar obje√ß√µes
            objecoes_dir = os.path.join(session_dir, 'objecoes')
            os.makedirs(objecoes_dir, exist_ok=True)
            
            with open(os.path.join(objecoes_dir, 'objecoes_principais.md'), 'w') as f:
                f.write(f"# Obje√ß√µes Principais\n\n{chr(10).join([f'- {obj}' for obj in contexto.objecoes])}")
            
            # Salvar casos de sucesso
            casos_dir = os.path.join(session_dir, 'casos_sucesso')
            os.makedirs(casos_dir, exist_ok=True)
            
            with open(os.path.join(casos_dir, 'casos_verificados.md'), 'w') as f:
                f.write(f"# Casos de Sucesso\n\n{chr(10).join([f'- {caso}' for caso in contexto.casos_sucesso])}")
            
            # Salvar tend√™ncias
            tendencias_dir = os.path.join(session_dir, 'tendencias')
            os.makedirs(tendencias_dir, exist_ok=True)
            
            with open(os.path.join(tendencias_dir, 'tendencias_atuais.md'), 'w') as f:
                f.write(f"# Tend√™ncias Atuais\n\n{chr(10).join([f'- {tend}' for tend in contexto.tendencias])}")
            
            logger.info("‚úÖ Dados contextuais salvos")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar dados contextuais: {e}")
    
    def _validar_dados_coletados(self, session_id: str) -> bool:
        """Valida se os dados coletados s√£o suficientes"""
        try:
            session_dir = f"/workspace/project/v110/analyses_data/{session_id}"
            
            # Verificar arquivos cr√≠ticos
            arquivos_criticos = [
                f"{session_dir}/contexto/termos_chave.md",
                f"{session_dir}/objecoes/objecoes_principais.md",
                f"{session_dir}/casos_sucesso/casos_verificados.md",
                f"{session_dir}/tendencias/tendencias_atuais.md"
            ]
            
            for arquivo in arquivos_criticos:
                if not os.path.exists(arquivo) or os.path.getsize(arquivo) < 100:
                    logger.warning(f"‚ö†Ô∏è Arquivo insuficiente: {arquivo}")
                    return False
            
            logger.info("‚úÖ Dados validados com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
            return False
    
    def _salvar_fase(self, session_id: str, fase: int, dados: Dict[str, Any]):
        """Salva dados de uma fase espec√≠fica"""
        try:
            session_dir = f"/workspace/project/v110/analyses_data/{session_id}"
            modules_dir = os.path.join(session_dir, 'modules')
            os.makedirs(modules_dir, exist_ok=True)
            
            fase_names = {
                1: '01_event_architecture.md',
                2: '02_cpl1_opportunity.md',
                3: '03_cpl2_transformation.md',
                4: '04_cpl3_method.md',
                5: '05_cpl4_decision.md'
            }
            
            filename = fase_names.get(fase, f'fase_{fase}.md')
            filepath = os.path.join(modules_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# Fase {fase}\n\n")
                f.write(f"```json\n{json.dumps(dados, ensure_ascii=False, indent=2)}\n```")
            
            logger.info(f"‚úÖ Fase {fase} salva: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar fase {fase}: {e}")
    
    def _salvar_resultado_final(self, session_id: str, resultado: Dict[str, Any]):
        """Salva resultado final do protocolo"""
        try:
            session_dir = f"/workspace/project/v110/analyses_data/{session_id}"
            
            # Salvar JSON completo
            json_path = os.path.join(session_dir, 'cpl_protocol_result.json')
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(resultado, f, ensure_ascii=False, indent=2, default=str)
            
            # Salvar resumo em markdown
            md_path = os.path.join(session_dir, 'cpl_protocol_summary.md')
            with open(md_path, 'w', encoding='utf-8') as f:
                f.write(self._gerar_resumo_markdown(resultado))
            
            logger.info(f"‚úÖ Resultado final salvo: {session_dir}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar resultado final: {e}")
    
    def _gerar_resumo_markdown(self, resultado: Dict[str, Any]) -> str:
        """Gera resumo em markdown do protocolo"""
        return f"""# Protocolo CPLs Devastadores - Resultado Final

## Informa√ß√µes Gerais
- **Session ID**: {resultado['session_id']}
- **Data**: {resultado['timestamp']}
- **Tema**: {resultado['contexto_estrategico']['tema']}
- **Segmento**: {resultado['contexto_estrategico']['segmento']}
- **P√∫blico**: {resultado['contexto_estrategico']['publico_alvo']}

## Evento Magn√©tico
- **Nome**: {resultado['evento_magnetico']['nome']}
- **Promessa**: {resultado['evento_magnetico']['promessa_central']}

## CPLs Gerados

### CPL1 - A Oportunidade Paralisante
- **T√≠tulo**: {resultado['cpls']['cpl1']['titulo']}
- **Objetivo**: {resultado['cpls']['cpl1']['objetivo']}

### CPL2 - A Transforma√ß√£o Imposs√≠vel
- **T√≠tulo**: {resultado['cpls']['cpl2']['titulo']}
- **Objetivo**: {resultado['cpls']['cpl2']['objetivo']}

### CPL3 - O Caminho Revolucion√°rio
- **T√≠tulo**: {resultado['cpls']['cpl3']['titulo']}
- **Objetivo**: {resultado['cpls']['cpl3']['objetivo']}

### CPL4 - A Decis√£o Inevit√°vel
- **T√≠tulo**: {resultado['cpls']['cpl4']['titulo']}
- **Objetivo**: {resultado['cpls']['cpl4']['objetivo']}

## Estat√≠sticas da Busca
- **Total de Posts**: {resultado.get('dados_busca', {}).get('total_posts', 0)}
- **Total de Imagens**: {resultado.get('dados_busca', {}).get('total_images', 0)}
- **Plataformas**: {', '.join(resultado.get('dados_busca', {}).get('platforms', {}).keys())}
"""

# Inst√¢ncia global (s√≥ cria se n√£o houver erros)
cpl_protocol = None
try:
    cpl_protocol = CPLDevastadorProtocol()
    logger.info("‚úÖ CPL Protocol inicializado com sucesso")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è CPL Protocol n√£o dispon√≠vel: {e}")
    cpl_protocol = None

def get_cpl_protocol() -> CPLDevastadorProtocol:
    """Retorna inst√¢ncia do protocolo CPL"""
    return cpl_protocol