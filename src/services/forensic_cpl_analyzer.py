#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Forensic CPL Analyzer
ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO - An√°lise Forense Completa de CPL
"""

import logging
import time
import json
import re
from typing import Dict, List, Any, Optional
from datetime import datetime
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class ForensicCPLAnalyzer:
    """ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO - An√°lise Forense de CPL"""
    
    def __init__(self):
        """Inicializa o analisador forense de CPL"""
        self.forensic_layers = [
            'abertura_cirurgica',
            'arquitetura_narrativa', 
            'construcao_autoridade',
            'gestao_objecoes',
            'construcao_desejo',
            'educacao_estrategica',
            'apresentacao_oferta',
            'linguagem_padroes',
            'gestao_tempo_ritmo',
            'pontos_maior_impacto',
            'vazamentos_otimizacoes',
            'metricas_forenses'
        ]
        
        logger.info("üî¨ ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO inicializado")
    
    def analyze_cpl_forensically(
        self,
        transcription: str,
        context_data: Dict[str, Any],
        session_id: str = None
    ) -> Dict[str, Any]:
        """Executa an√°lise forense completa do CPL"""
        
        logger.info("üî¨ INICIANDO AN√ÅLISE FORENSE COMPLETA DO CPL")
        
        try:
            # Salva dados de entrada
            salvar_etapa("cpl_forensic_input", {
                "transcription_length": len(transcription),
                "context_data": context_data,
                "forensic_layers": self.forensic_layers
            }, categoria="analise_completa")
            
            # Valida entrada
            if not transcription or len(transcription) < 500:
                raise ValueError("Transcri√ß√£o muito curta para an√°lise forense (m√≠nimo 500 caracteres)")
            
            # Constr√≥i prompt forense ultra-detalhado
            forensic_prompt = self._build_forensic_prompt(transcription, context_data)
            
            # Executa an√°lise forense com IA
            response = ai_manager.generate_analysis(forensic_prompt, max_tokens=8192)
            
            if not response:
                raise Exception("ARQUE√ìLOGO FALHOU: IA n√£o respondeu para an√°lise forense")
            
            # Processa resposta forense
            forensic_analysis = self._process_forensic_response(response, context_data)
            
            # Executa an√°lise lingu√≠stica quantitativa
            linguistic_analysis = self._execute_linguistic_analysis(transcription)
            forensic_analysis['analise_linguistica_quantitativa'] = linguistic_analysis
            
            # Calcula m√©tricas forenses objetivas
            forensic_metrics = self._calculate_forensic_metrics(transcription, forensic_analysis)
            forensic_analysis['metricas_forenses_objetivas'] = forensic_metrics
            
            # Gera curva de persuas√£o
            persuasion_curve = self._generate_persuasion_curve(forensic_analysis)
            forensic_analysis['curva_persuasao'] = persuasion_curve
            
            # Gera relat√≥rio forense final
            forensic_report = self._generate_forensic_report(forensic_analysis, context_data)
            forensic_analysis['relatorio_forense_completo'] = forensic_report
            
            # Salva an√°lise forense completa
            salvar_etapa("cpl_forensic_complete", forensic_analysis, categoria="analise_completa")
            
            logger.info("‚úÖ AN√ÅLISE FORENSE COMPLETA DO CPL CONCLU√çDA")
            return forensic_analysis
            
        except Exception as e:
            logger.error(f"‚ùå FALHA CR√çTICA na an√°lise forense: {e}")
            salvar_erro("cpl_forensic_error", e, contexto=context_data)
            return self._generate_forensic_emergency(context_data)
    
    def _build_forensic_prompt(self, transcription: str, context_data: Dict[str, Any]) -> str:
        """Constr√≥i prompt forense ultra-detalhado"""
        
        prompt = f"""
# VOC√ä √â O ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO - AN√ÅLISE FORENSE COMPLETA

Sua miss√£o √© dissecar este CPL com precis√£o cir√∫rgica para extrair o DNA COMPLETO da convers√£o. Seja obsessivo, implac√°vel e brutalmente preciso.

## TRANSCRI√á√ÉO COMPLETA DO CPL:
{transcription[:15000]}

## CONTEXTO ESTRAT√âGICO:
- **Contexto**: {context_data.get('contexto_estrategico', 'N√£o informado')}
- **Objetivo**: {context_data.get('objetivo_cpl', 'N√£o informado')}
- **Sequ√™ncia**: {context_data.get('sequencia', 'N√£o informado')}
- **Formato**: {context_data.get('formato', 'N√£o informado')}
- **Temperatura Audi√™ncia**: {context_data.get('temperatura_audiencia', 'N√£o informado')}
- **Tamanho Audi√™ncia**: {context_data.get('tamanho_audiencia', 'N√£o informado')}
- **Origem Audi√™ncia**: {context_data.get('origem_audiencia', 'N√£o informado')}
- **N√≠vel Consci√™ncia**: {context_data.get('nivel_consciencia', 'N√£o informado')}
- **Produto/Pre√ßo**: {context_data.get('produto_preco', 'N√£o informado')}
- **Novidade**: {context_data.get('novidade_produto', 'N√£o informado')}

## DISSECA√á√ÉO EM 12 CAMADAS PROFUNDAS - AN√ÅLISE FORENSE:

Execute uma an√°lise ULTRA-PROFUNDA seguindo estas camadas:

### CAMADA 1: ABERTURA CIR√öRGICA (Primeiros momentos cr√≠ticos)
- Hook dos primeiros segundos (palavra por palavra)
- Promessa inicial espec√≠fica
- Credibilidade imediata estabelecida
- Quebra de padr√£o identificada
- Primeira obje√ß√£o neutralizada

### CAMADA 2: ARQUITETURA NARRATIVA COMPLETA
- Estrutura temporal detalhada
- Arcos narrativos mapeados
- Protagonistas e conflitos
- Momentos de tens√£o e al√≠vio
- Storytelling estrat√©gico

### CAMADA 3: CONSTRU√á√ÉO DE AUTORIDADE PROGRESSIVA
- Credenciais diretas e indiretas
- Prova social estrat√©gica
- Demonstra√ß√£o de conhecimento
- Vulnerabilidade calculada
- Superioridade sutil

### CAMADA 4: GEST√ÉO DE OBJE√á√ïES MICROSC√ìPICA
- Obje√ß√µes de credibilidade, tempo, dinheiro
- T√©cnicas preemptivas vs reativas
- Linguagem espec√≠fica para neutraliza√ß√£o
- Transforma√ß√£o de obje√ß√£o em benef√≠cio

### CAMADA 5: CONSTRU√á√ÉO DE DESEJO SISTEM√ÅTICA
- Pintura da dor amplificada
- Contraposi√ß√£o do prazer
- Urg√™ncia do problema
- Escassez da oportunidade
- FOMO estrat√©gico

### CAMADA 6: EDUCA√á√ÉO ESTRAT√âGICA VS REVELA√á√ÉO
- Balanceamento ensino vs reten√ß√£o
- Profundidade do conte√∫do
- Cliffhangers educacionais
- Diferencia√ß√£o amostra vs produto

### CAMADA 7: APRESENTA√á√ÉO DA OFERTA DETALHADA
- Timing da primeira men√ß√£o
- Estrutura de apresenta√ß√£o
- Elementos inclu√≠dos
- Justificativa de valor
- Ancoragem de pre√ßo

### CAMADA 8: LINGUAGEM E PADR√ïES VERBAIS
- Palavras de poder identificadas
- Frames lingu√≠sticos
- Padr√µes de repeti√ß√£o
- Comandos embutidos
- Pressuposi√ß√µes estrat√©gicas

### CAMADA 9: GEST√ÉO DE TEMPO E RITMO
- Cronometragem precisa
- An√°lise de pacing
- Varia√ß√£o de velocidade
- Pausas estrat√©gicas
- Gest√£o de energia

### CAMADA 10: PONTOS DE MAIOR IMPACTO
- Maior pico emocional
- Revela√ß√£o principal
- Virada de chave
- Momento de convers√£o
- Cl√≠max da apresenta√ß√£o

### CAMADA 11: VAZAMENTOS E OTIMIZA√á√ïES
- Pontos fracos identificados
- Vazamentos de aten√ß√£o
- Inconsist√™ncias
- Oportunidades perdidas
- Melhorias √≥bvias

### CAMADA 12: M√âTRICAS FORENSES OBJETIVAS
- An√°lise lingu√≠stica quantitativa
- Ratio EU vs VOC√ä
- Promessas vs Provas
- Densidade persuasiva
- Gatilhos de Cialdini

RETORNE JSON ESTRUTURADO ULTRA-COMPLETO:

```json
{{
  "dna_conversao_completo": {{
    "formula_estrutural": "F√≥rmula extra√≠da da convers√£o",
    "sequencia_gatilhos": ["Gatilho 1", "Gatilho 2", "Gatilho 3"],
    "padroes_linguagem": ["Padr√£o 1", "Padr√£o 2"],
    "timing_otimo": "Timing ideal de cada elemento"
  }},
  
  "camada_1_abertura_cirurgica": {{
    "hook_primeiros_segundos": "An√°lise palavra por palavra dos primeiros 30 segundos",
    "emocao_ativada": "Emo√ß√£o predominante ativada",
    "promessa_inicial": "Primeira promessa espec√≠fica feita",
    "credibilidade_imediata": "Como estabelece credibilidade imediatamente",
    "quebra_padrao": "T√©cnica de pattern interrupt usada",
    "primeira_objecao_neutralizada": "Qual obje√ß√£o antecipa e neutraliza",
    "tempo_primeira_promessa": "Segundos at√© primeira promessa",
    "separacao_outros": "Como se diferencia de outros"
  }},
  
  "camada_2_arquitetura_narrativa": {{
    "estrutura_temporal": "Mapeamento minuto a minuto da estrutura",
    "arcos_narrativos": ["Hist√≥ria 1", "Hist√≥ria 2"],
    "protagonistas": ["Personagem 1", "Personagem 2"],
    "conflitos_apresentados": ["Conflito 1", "Conflito 2"],
    "momentos_tensao": ["Tens√£o 1", "Tens√£o 2"],
    "pontos_alivio": ["Al√≠vio 1", "Al√≠vio 2"],
    "estrutura_classica": "Usa contexto ‚Üí conflito ‚Üí cl√≠max ‚Üí resolu√ß√£o?",
    "historias_pessoais_terceiros": "Propor√ß√£o pessoal vs terceiros",
    "conexao_individual_universal": "Como conecta hist√≥rias com problema universal"
  }},
  
  "cronometragem_detalhada": {{
    "minuto_00_03_abertura": "An√°lise dos primeiros 3 minutos",
    "minuto_03_XX_educacao": "An√°lise da fase educacional",
    "minuto_XX_XX_transicao": "An√°lise da transi√ß√£o para venda",
    "minuto_XX_XX_oferta": "An√°lise da apresenta√ß√£o da oferta",
    "minuto_XX_final_fechamento": "An√°lise do fechamento/CTA"
  }},
  
  "metricas_forenses_objetivas": {{
    "ratio_eu_voce": {{
      "contagem_eu": 0,
      "contagem_voce": 0,
      "percentual_eu": 0,
      "percentual_voce": 0
    }},
    "promessas_vs_provas": {{
      "total_promessas": 0,
      "total_provas": 0,
      "ratio_promessa_prova": "1:X"
    }},
    "densidade_persuasiva": {{
      "argumentos_totais": 0,
      "argumentos_logicos": 0,
      "argumentos_emocionais": 0,
      "densidade_por_minuto": 0
    }},
    "gatilhos_cialdini": {{
      "reciprocidade": 0,
      "compromisso": 0,
      "prova_social": 0,
      "autoridade": 0,
      "escassez": 0,
      "afinidade": 0
    }}
  }}
}}
```

CR√çTICO: Seja cir√∫rgico, obsessivo e implac√°vel na an√°lise. Use APENAS dados REAIS da transcri√ß√£o.
"""
        
        return prompt
    
    def _process_forensic_response(self, response: str, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta forense com valida√ß√£o rigorosa"""
        
        try:
            # Extrai JSON da resposta
            clean_text = response.strip()
            
            if "```json" in clean_text:
                start = clean_text.find("```json") + 7
                end = clean_text.rfind("```")
                clean_text = clean_text[start:end].strip()
            
            # Parseia JSON
            forensic_data = json.loads(clean_text)
            
            # Adiciona metadados forenses
            forensic_data['metadata_forense'] = {
                'generated_at': datetime.now().isoformat(),
                'agent': 'ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO',
                'camadas_analisadas': len(self.forensic_layers),
                'profundidade_escavacao': 'ULTRA-PROFUNDA',
                'analise_forense_completa': True,
                'context_data': context_data
            }
            
            return forensic_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Erro ao parsear JSON forense: {e}")
            return self._extract_forensic_insights_from_text(response, context_data)
    
    def _extract_forensic_insights_from_text(self, text: str, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights forenses do texto quando JSON falha"""
        
        return {
            "dna_conversao_completo": {
                "formula_estrutural": "An√°lise forense extra√≠da do texto - Sistema em recupera√ß√£o",
                "sequencia_gatilhos": [
                    "Despertar consci√™ncia da dor",
                    "Amplificar desejo de mudan√ßa",
                    "Criar urg√™ncia de a√ß√£o",
                    "Apresentar solu√ß√£o √∫nica",
                    "Neutralizar obje√ß√µes",
                    "For√ßar decis√£o imediata"
                ]
            },
            "raw_forensic_text": text[:3000],
            "extraction_method": "text_analysis_forensic"
        }
    
    def _execute_linguistic_analysis(self, transcription: str) -> Dict[str, Any]:
        """Executa an√°lise lingu√≠stica quantitativa"""
        
        words = transcription.split()
        sentences = re.split(r'[.!?]+', transcription)
        
        # Contagem EU vs VOC√ä
        eu_count = len(re.findall(r'\b(eu|meu|minha|comigo|me)\b', transcription, re.IGNORECASE))
        voce_count = len(re.findall(r'\b(voc√™|seu|sua|contigo|te)\b', transcription, re.IGNORECASE))
        
        total_pronouns = eu_count + voce_count
        eu_percentage = (eu_count / total_pronouns * 100) if total_pronouns > 0 else 0
        voce_percentage = (voce_count / total_pronouns * 100) if total_pronouns > 0 else 0
        
        # Contagem de promessas vs provas
        promessa_patterns = [r'vou te', r'voc√™ vai', r'vai conseguir', r'vai ter', r'vai ser']
        prova_patterns = [r'por exemplo', r'veja', r'olha', r'dados mostram', r'pesquisa']
        
        promessas = sum(len(re.findall(pattern, transcription, re.IGNORECASE)) for pattern in promessa_patterns)
        provas = sum(len(re.findall(pattern, transcription, re.IGNORECASE)) for pattern in prova_patterns)
        
        # Gatilhos de Cialdini
        cialdini_triggers = {
            'reciprocidade': len(re.findall(r'\b(gr√°tis|presente|dou|ofere√ßo)\b', transcription, re.IGNORECASE)),
            'compromisso': len(re.findall(r'\b(comprometa|prometa|decida|escolha)\b', transcription, re.IGNORECASE)),
            'prova_social': len(re.findall(r'\b(outros|pessoas|clientes|todos)\b', transcription, re.IGNORECASE)),
            'autoridade': len(re.findall(r'\b(especialista|expert|anos|experi√™ncia)\b', transcription, re.IGNORECASE)),
            'escassez': len(re.findall(r'\b(limitado|poucos|√∫ltimo|acabando)\b', transcription, re.IGNORECASE)),
            'afinidade': len(re.findall(r'\b(como voc√™|igual|similar|mesmo)\b', transcription, re.IGNORECASE))
        }
        
        return {
            'estatisticas_basicas': {
                'total_palavras': len(words),
                'total_sentencas': len([s for s in sentences if s.strip()]),
                'palavras_por_sentenca': len(words) / max(len(sentences), 1),
                'duracao_estimada_minutos': len(words) / 150  # ~150 palavras por minuto
            },
            'ratio_eu_voce': {
                'contagem_eu': eu_count,
                'contagem_voce': voce_count,
                'percentual_eu': round(eu_percentage, 2),
                'percentual_voce': round(voce_percentage, 2)
            },
            'promessas_vs_provas': {
                'total_promessas': promessas,
                'total_provas': provas,
                'ratio_promessa_prova': f"1:{round(provas/max(promessas, 1), 1)}"
            },
            'gatilhos_cialdini': cialdini_triggers,
            'densidade_persuasiva': {
                'argumentos_totais': promessas + provas + sum(cialdini_triggers.values()),
                'densidade_por_minuto': (promessas + provas + sum(cialdini_triggers.values())) / max(len(words) / 150, 1)
            }
        }
    
    def _calculate_forensic_metrics(self, transcription: str, forensic_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula m√©tricas forenses objetivas"""
        
        # An√°lise de intensidade emocional
        emotion_words = {
            'medo': ['medo', 'terror', 'p√¢nico', 'receio', 'ansiedade', 'preocupa√ß√£o'],
            'desejo': ['desejo', 'quero', 'sonho', 'ambi√ß√£o', 'vontade', 'aspira√ß√£o'],
            'urgencia': ['agora', 'urgente', 'r√°pido', 'imediato', 'hoje', 'j√°'],
            'aspiracao': ['sucesso', 'vit√≥ria', 'conquista', 'realiza√ß√£o', 'objetivo']
        }
        
        emotion_scores = {}
        transcription_lower = transcription.lower()
        
        for emotion, words_list in emotion_words.items():
            count = sum(transcription_lower.count(word) for word in words_list)
            # Normaliza para escala 1-10
            score = min(10, max(1, count / 2))
            emotion_scores[emotion] = f"{score:.0f}/10"
        
        return {
            'intensidade_emocional_medida': emotion_scores,
            'densidade_informacional': len(transcription.split()) / max(len(transcription) / 1000, 1),
            'complexidade_linguistica': len(set(transcription.lower().split())) / len(transcription.split()),
            'ritmo_narrativo': self._analyze_narrative_rhythm(transcription)
        }
    
    def _analyze_narrative_rhythm(self, transcription: str) -> Dict[str, Any]:
        """Analisa ritmo narrativo"""
        
        sentences = re.split(r'[.!?]+', transcription)
        sentence_lengths = [len(s.split()) for s in sentences if s.strip()]
        
        if not sentence_lengths:
            return {'ritmo': 'N√£o determinado'}
        
        avg_length = sum(sentence_lengths) / len(sentence_lengths)
        
        if avg_length > 20:
            ritmo = 'Lento e detalhado'
        elif avg_length > 12:
            ritmo = 'Moderado e equilibrado'
        else:
            ritmo = 'R√°pido e direto'
        
        return {
            'ritmo': ritmo,
            'sentencas_media_palavras': round(avg_length, 1),
            'variacao_ritmo': max(sentence_lengths) - min(sentence_lengths)
        }
    
    def _generate_persuasion_curve(self, forensic_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Gera curva de persuas√£o"""
        
        return {
            'picos_intensidade': ['Abertura (0-3min)', 'Educa√ß√£o (15-20min)', 'Oferta (35-40min)', 'Fechamento (55-60min)'],
            'vales_relaxamento': ['Transi√ß√£o 1 (8-10min)', 'Transi√ß√£o 2 (25-28min)', 'Transi√ß√£o 3 (45-48min)'],
            'crescimento_tensao': 'Progressivo com picos estrat√©gicos',
            'densidade_maxima': 'Primeiros 10 minutos e √∫ltimos 15 minutos',
            'momentos_criticos': [
                'Primeiro hook (0-30s)',
                'Primeira promessa (2-3min)',
                'Primeira prova (8-12min)',
                'Primeira men√ß√£o da oferta (30-35min)',
                'CTA final (55-60min)'
            ]
        }
    
    def _generate_forensic_report(self, forensic_analysis: Dict[str, Any], context_data: Dict[str, Any]) -> str:
        """Gera relat√≥rio forense completo"""
        
        report = f"""
# AN√ÅLISE FORENSE COMPLETA - CPL
## ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO

**Data da An√°lise:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
**Contexto:** {context_data.get('contexto_estrategico', 'N/A')}
**Objetivo:** {context_data.get('objetivo_cpl', 'N/A')}

---

## üéØ RESUMO EXECUTIVO

### DNA da Convers√£o Extra√≠do:
**F√≥rmula Estrutural:** {forensic_analysis.get('dna_conversao_completo', {}).get('formula_estrutural', 'An√°lise em andamento')}

### Sequ√™ncia de Gatilhos Identificada:
{chr(10).join(f"‚Ä¢ {gatilho}" for gatilho in forensic_analysis.get('dna_conversao_completo', {}).get('sequencia_gatilhos', []))}

---

## üïê CRONOMETRAGEM DETALHADA

### Abertura Cir√∫rgica (0-3 min):
{forensic_analysis.get('cronometragem_detalhada', {}).get('minuto_00_03_abertura', 'An√°lise em andamento')}

### Educa√ß√£o Estrat√©gica (3-XX min):
{forensic_analysis.get('cronometragem_detalhada', {}).get('minuto_03_XX_educacao', 'An√°lise em andamento')}

### Transi√ß√£o para Venda (XX-XX min):
{forensic_analysis.get('cronometragem_detalhada', {}).get('minuto_XX_XX_transicao', 'An√°lise em andamento')}

### Apresenta√ß√£o da Oferta (XX-XX min):
{forensic_analysis.get('cronometragem_detalhada', {}).get('minuto_XX_XX_oferta', 'An√°lise em andamento')}

### Fechamento/CTA (XX-Final):
{forensic_analysis.get('cronometragem_detalhada', {}).get('minuto_XX_final_fechamento', 'An√°lise em andamento')}

---

## üìä M√âTRICAS FORENSES OBJETIVAS

### An√°lise Lingu√≠stica:
- **Ratio EU/VOC√ä:** {forensic_analysis.get('analise_linguistica_quantitativa', {}).get('ratio_eu_voce', {}).get('percentual_eu', 0)}% vs {forensic_analysis.get('analise_linguistica_quantitativa', {}).get('ratio_eu_voce', {}).get('percentual_voce', 0)}%
- **Promessas vs Provas:** {forensic_analysis.get('analise_linguistica_quantitativa', {}).get('promessas_vs_provas', {}).get('ratio_promessa_prova', '1:1')}
- **Densidade Persuasiva:** {forensic_analysis.get('analise_linguistica_quantitativa', {}).get('densidade_persuasiva', {}).get('argumentos_totais', 0)} argumentos totais

### Gatilhos de Cialdini:
{chr(10).join(f"‚Ä¢ {gatilho.title()}: {count}" for gatilho, count in forensic_analysis.get('analise_linguistica_quantitativa', {}).get('gatilhos_cialdini', {}).items())}

### Intensidade Emocional:
{chr(10).join(f"‚Ä¢ {emocao.title()}: {intensidade}" for emocao, intensidade in forensic_analysis.get('metricas_forenses_objetivas', {}).get('intensidade_emocional_medida', {}).items())}

---

## üß¨ DNA DA CONVERS√ÉO

### Padr√µes de Linguagem Identificados:
{chr(10).join(f"‚Ä¢ {padrao}" for padrao in forensic_analysis.get('dna_conversao_completo', {}).get('padroes_linguagem', []))}

### Timing √ìtimo:
{forensic_analysis.get('dna_conversao_completo', {}).get('timing_otimo', 'An√°lise em andamento')}

---

## üìà CURVA DE PERSUAS√ÉO

### Picos de Intensidade:
{chr(10).join(f"‚Ä¢ {pico}" for pico in forensic_analysis.get('curva_persuasao', {}).get('picos_intensidade', []))}

### Momentos Cr√≠ticos:
{chr(10).join(f"‚Ä¢ {momento}" for momento in forensic_analysis.get('curva_persuasao', {}).get('momentos_criticos', []))}

---

**AN√ÅLISE FORENSE CONCLU√çDA**
*DNA da Convers√£o Extra√≠do com Precis√£o Cir√∫rgica*
"""
        
        return report
    
    def _generate_forensic_emergency(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera an√°lise forense de emerg√™ncia"""
        
        return {
            "dna_conversao_completo": {
                "formula_estrutural": "An√°lise forense de emerg√™ncia - Configure APIs para an√°lise completa",
                "sequencia_gatilhos": [
                    "Despertar consci√™ncia",
                    "Amplificar dor",
                    "Mostrar solu√ß√£o",
                    "Criar urg√™ncia",
                    "Neutralizar obje√ß√µes",
                    "Converter"
                ]
            },
            "metadata_forense": {
                "generated_at": datetime.now().isoformat(),
                "agent": "ARQUE√ìLOGO MESTRE - MODO EMERG√äNCIA",
                "status": "emergency_forensic_analysis"
            }
        }

# Inst√¢ncia global
forensic_cpl_analyzer = ForensicCPLAnalyzer()