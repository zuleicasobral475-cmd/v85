#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Psychological Agents System
Sistema completo de agentes psicol√≥gicos especializados
"""

import logging
import time
import json
from typing import Dict, List, Any, Optional
from datetime import datetime
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class PsychologicalAgentsSystem:
    """Sistema de agentes psicol√≥gicos especializados"""

    def __init__(self):
        """Inicializa sistema de agentes"""
        self.agents = {
            'arqueologist': ArchaeologistAgent(),
            'visceral_master': VisceralMasterAgent(),
            'drivers_architect': DriversArchitectAgent(),
            'visual_director': VisualDirectorAgent(),
            'anti_objection': AntiObjectionAgent(),
            'pre_pitch_architect': PrePitchArchitectAgent()
        }

        logger.info("Sistema de Agentes Psicol√≥gicos inicializado")

    def _clean_data_for_processing(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Remove refer√™ncias circulares dos dados para processamento seguro"""
        if not isinstance(data, dict):
            return data

        cleaned_data = {}
        for key, value in data.items():
            try:
                if isinstance(value, dict):
                    # Limita a profundidade para evitar refer√™ncias circulares
                    cleaned_value = {}
                    for sub_key, sub_value in value.items():
                        if isinstance(sub_value, (str, int, float, bool, list)):
                            cleaned_value[sub_key] = sub_value
                        elif isinstance(sub_value, dict) and len(str(sub_value)) < 10000:
                            cleaned_value[sub_key] = str(sub_value)[:1000]
                        else:
                            cleaned_value[sub_key] = str(sub_value)[:500]
                    cleaned_data[key] = cleaned_value
                elif isinstance(value, list):
                    cleaned_data[key] = [str(item)[:500] if not isinstance(item, (str, int, float, bool)) else item for item in value[:20]]
                elif isinstance(value, (str, int, float, bool)):
                    cleaned_data[key] = value
                else:
                    cleaned_data[key] = str(value)[:1000]
            except Exception as e:
                logger.warning(f"Erro ao limpar chave {key}: {e}")
                cleaned_data[key] = str(value)[:500]

        return cleaned_data

    def execute_complete_psychological_analysis(
        self,
        data: Dict[str, Any],
        session_id: str = None
    ) -> Dict[str, Any]:
        """Executa an√°lise psicol√≥gica completa com todos os agentes"""

        logger.info("üß† Iniciando an√°lise psicol√≥gica completa...")

        # Limpa dados de entrada para evitar refer√™ncias circulares
        clean_data = self._clean_data_for_processing(data)

        results = {
            'session_id': session_id,
            'timestamp': datetime.now().isoformat(),
            'agents_results': {},
            'consolidated_analysis': {},
            'psychological_metrics': {}
        }

        # Executa cada agente em sequ√™ncia
        for agent_name, agent in self.agents.items():
            try:
                logger.info(f"üé≠ Executando agente: {agent_name}")

                # Usa dados limpos para cada agente
                agent_result = agent.execute_analysis(clean_data, session_id)
                results['agents_results'][agent_name] = agent_result

                # Salva resultado de cada agente
                salvar_etapa(f"agente_{agent_name}", agent_result, categoria="analise_completa")

                logger.info(f"‚úÖ Agente {agent_name} conclu√≠do")

            except Exception as e:
                logger.error(f"‚ùå Erro no agente {agent_name}: {e}")
                salvar_erro(f"agente_{agent_name}", e, contexto=data)
                results['agents_results'][agent_name] = {
                    'error': str(e),
                    'status': 'failed'
                }

        # Consolida an√°lise final
        results['consolidated_analysis'] = self._consolidate_psychological_analysis(results['agents_results'])
        results['psychological_metrics'] = self._calculate_psychological_metrics(results['agents_results'])

        # Aplica serializa√ß√£o segura antes de salvar
        safe_results = self._clean_for_serialization(results)
        
        # Salva an√°lise consolidada
        salvar_etapa("analise_psicologica_completa", safe_results, categoria="analise_completa")

        return safe_results

    def _consolidate_psychological_analysis(self, agents_results: Dict[str, Any]) -> Dict[str, Any]:
        """Consolida resultados de todos os agentes"""

        consolidated = {
            'avatar_arqueologico_completo': {},
            'drivers_mentais_arsenal': [],
            'sistema_anti_objecao_completo': {},
            'provas_visuais_arsenal': [],
            'pre_pitch_orquestrado': {},
            'metricas_persuasao': {}
        }

        # Consolida avatar do agente visceral
        if 'visceral_master' in agents_results:
            visceral_data = agents_results['visceral_master']
            if 'avatar_visceral' in visceral_data:
                consolidated['avatar_arqueologico_completo'] = visceral_data['avatar_visceral']

        # Consolida drivers do arquiteto
        if 'drivers_architect' in agents_results:
            drivers_data = agents_results['drivers_architect']
            if 'drivers_customizados' in drivers_data:
                consolidated['drivers_mentais_arsenal'] = drivers_data['drivers_customizados']

        # Consolida sistema anti-obje√ß√£o
        if 'anti_objection' in agents_results:
            anti_obj_data = agents_results['anti_objection']
            consolidated['sistema_anti_objecao_completo'] = anti_obj_data

        # Consolida provas visuais
        if 'visual_director' in agents_results:
            visual_data = agents_results['visual_director']
            if 'provas_visuais' in visual_data:
                consolidated['provas_visuais_arsenal'] = visual_data['provas_visuais']

        # Consolida pr√©-pitch
        if 'pre_pitch_architect' in agents_results:
            pre_pitch_data = agents_results['pre_pitch_architect']
            consolidated['pre_pitch_orquestrado'] = pre_pitch_data

        return consolidated

    def _calculate_psychological_metrics(self, agents_results: Dict[str, Any]) -> Dict[str, Any]:
        """Calcula m√©tricas psicol√≥gicas da an√°lise"""

        metrics = {
            'densidade_persuasiva': 0,
            'intensidade_emocional': 0,
            'cobertura_objecoes': 0,
            'arsenal_completo': False,
            'agentes_executados': len([r for r in agents_results.values() if r.get('status') != 'failed']),
            'total_agentes': len(self.agents)
        }

        # Calcula densidade persuasiva
        total_drivers = 0
        total_provas = 0
        total_scripts = 0

        for agent_result in agents_results.values():
            if isinstance(agent_result, dict):
                if 'drivers_customizados' in agent_result:
                    total_drivers += len(agent_result['drivers_customizados'])
                if 'provas_visuais' in agent_result:
                    total_provas += len(agent_result['provas_visuais'])
                if 'scripts_personalizados' in agent_result:
                    total_scripts += len(agent_result['scripts_personalizados'])

        metrics['densidade_persuasiva'] = total_drivers + total_provas + total_scripts
        metrics['arsenal_completo'] = metrics['densidade_persuasiva'] >= 15

        return metrics

    def _clean_for_serialization(self, obj, seen=None, depth=0):
        """Remove refer√™ncias circulares e limpa objetos para serializa√ß√£o JSON"""
        if seen is None:
            seen = set()

        if depth > 10:  # Limite de profundidade
            return f"<Max depth reached: {type(obj).__name__}>"

        obj_id = id(obj)
        if obj_id in seen:
            return f"<Circular reference: {type(obj).__name__}>"

        seen.add(obj_id)

        try:
            if isinstance(obj, dict):
                cleaned = {}
                for k, v in obj.items():
                    if isinstance(k, str) and len(k) < 1000:
                        cleaned[k] = self._clean_for_serialization(v, seen.copy(), depth + 1)
                return cleaned
            elif isinstance(obj, (list, tuple)):
                return [self._clean_for_serialization(item, seen.copy(), depth + 1) for item in obj[:100]]
            elif isinstance(obj, (str, int, float, bool, type(None))):
                return obj
            elif hasattr(obj, '__dict__'):
                return f"<Object {type(obj).__name__}>"
            else:
                return str(obj)[:1000]
        except Exception as e:
            return f"<Serialization error: {str(e)[:100]}>"
        finally:
            seen.discard(obj_id)

    def _create_emergency_analysis(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria an√°lise de emerg√™ncia quando todos os agentes falham"""
        return {
            'psychological_analysis': {
                'emergency_mode': True,
                'basic_insights': [
                    'An√°lise psicol√≥gica em modo de emerg√™ncia',
                    'Dados b√°sicos processados sem agentes especializados',
                    'Recomenda-se verificar configura√ß√µes dos agentes'
                ]
            },
            'agents_executed': [],
            'total_agents': len(self.agents),
            'success_rate': '0/6',
            'status': 'emergency_fallback'
        }

class ArchaeologistAgent:
    """ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Executa an√°lise arqueol√≥gica em 12 camadas"""

        # Extrai informa√ß√µes b√°sicas de forma segura
        segmento = data.get('segmento', 'neg√≥cios') if isinstance(data, dict) else 'neg√≥cios'
        produto = data.get('produto', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado'
        publico = data.get('publico', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado'
        preco = data.get('preco', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado'

        prompt = f"""
# VOC√ä √â O ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO

Sua miss√£o √© escavar cada detalhe do mercado de {segmento} para encontrar o DNA COMPLETO da convers√£o. Seja cir√∫rgico, obsessivo e implac√°vel.

## DADOS REAIS DO PROJETO:
- **Segmento**: {segmento}
- **Produto/Servi√ßo**: {produto}
- **P√∫blico-Alvo**: {publico}
- **Pre√ßo**: R$ {preco}

## DISSECA√á√ÉO EM 12 CAMADAS PROFUNDAS:

Execute uma an√°lise ULTRA-PROFUNDA seguindo estas camadas:

### CAMADA 1: ABERTURA CIR√öRGICA (Primeiros momentos cr√≠ticos)
### CAMADA 2: ARQUITETURA NARRATIVA COMPLETA
### CAMADA 3: CONSTRU√á√ÉO DE AUTORIDADE PROGRESSIVA
### CAMADA 4: GEST√ÉO DE OBJE√á√ïES MICROSC√ìPICA
### CAMADA 5: CONSTRU√á√ÉO DE DESEJO SISTEM√ÅTICA
### CAMADA 6: EDUCA√á√ÉO ESTRAT√âGICA VS REVELA√á√ÉO
### CAMADA 7: APRESENTA√á√ÉO DA OFERTA DETALHADA
### CAMADA 8: LINGUAGEM E PADR√ïES VERBAIS
### CAMADA 9: GEST√ÉO DE TEMPO E RITMO
### CAMADA 10: PONTOS DE MAIOR IMPACTO
### CAMADA 11: VAZAMENTOS E OTIMIZA√á√ïES
### CAMADA 12: M√âTRICAS FORENSES OBJETIVAS

RETORNE JSON ESTRUTURADO ULTRA-COMPLETO com an√°lise arqueol√≥gica detalhada.
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_archaeological_response(response, data)
        else:
            return self._generate_archaeological_fallback(data)

    def _process_archaeological_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta arqueol√≥gica"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                # An√°lise estruturada do texto
                return self._extract_archaeological_insights(response, data)
        except:
            return self._generate_archaeological_fallback(data)

    def _extract_archaeological_insights(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights arqueol√≥gicos do texto"""
        return {
            'analise_arqueologica': {
                'camadas_analisadas': 12,
                'dna_conversao': text[:2000],
                'insights_escavados': self._extract_insights_from_text(text),
                'metricas_forenses': self._extract_metrics_from_text(text)
            },
            'status': 'archaeological_analysis_complete'
        }

    def _extract_insights_from_text(self, text: str) -> List[str]:
        """Extrai insights do texto"""
        sentences = [s.strip() for s in text.split('.') if len(s.strip()) > 50]
        return sentences[:15]

    def _extract_metrics_from_text(self, text: str) -> Dict[str, Any]:
        """Extrai m√©tricas do texto"""
        import re

        numbers = re.findall(r'\d+(?:\.\d+)?%?', text)

        return {
            'densidade_informacional': len(text.split()) / 100,
            'elementos_numericos': len(numbers),
            'intensidade_linguistica': len([w for w in text.split() if w.isupper()]) / len(text.split()) * 100
        }

    def _generate_archaeological_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera an√°lise arqueol√≥gica de fallback"""
        segmento = data.get('segmento', 'neg√≥cios')

        return {
            'analise_arqueologica': {
                'camadas_analisadas': 12,
                'dna_conversao': f'An√°lise arqueol√≥gica para {segmento} - Sistema em modo de emerg√™ncia',
                'insights_escavados': [
                    f'Mercado de {segmento} em transforma√ß√£o digital',
                    'Necessidade de abordagem psicol√≥gica espec√≠fica',
                    'Oportunidades de persuas√£o visceral identificadas'
                ],
                'metricas_forenses': {
                    'densidade_persuasiva': 75,
                    'intensidade_emocional': 80,
                    'cobertura_objecoes': 85
                }
            },
            'status': 'archaeological_fallback'
        }

class VisceralMasterAgent:
    """MESTRE DA PERSUAS√ÉO VISCERAL"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Executa engenharia reversa psicol√≥gica profunda"""

        # Extrai informa√ß√µes de forma segura para evitar refer√™ncias circulares
        safe_data = {
            'segmento': data.get('segmento', 'neg√≥cios') if isinstance(data, dict) else 'neg√≥cios',
            'produto': data.get('produto', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado',
            'publico': data.get('publico', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado',
            'preco': data.get('preco', 'N√£o informado') if isinstance(data, dict) else 'N√£o informado'
        }

        prompt = f"""
# VOC√ä √â O MESTRE DA PERSUAS√ÉO VISCERAL

Linguagem: Direta, brutalmente honesta, carregada de tens√£o psicol√≥gica.
Miss√£o: Realizar Engenharia Reversa Psicol√≥gica PROFUNDA.

## DADOS PARA ENGENHARIA REVERSA:
{json.dumps(safe_data, indent=2, ensure_ascii=False)}

## EXECUTE ENGENHARIA REVERSA PSICOL√ìGICA PROFUNDA:

V√° al√©m dos dados superficiais. Mergulhe em:
- Dores profundas e inconfess√°veis
- Desejos ardentes e proibidos
- Medos paralisantes e irracionais
- Frustra√ß√µes di√°rias (as pequenas mortes)
- Obje√ß√µes c√≠nicas reais
- Linguagem interna verdadeira
- Sonhos selvagens secretos

OBJETIVO: Criar dossi√™ t√£o preciso que o usu√°rio possa "LER A MENTE" dos leads.

RETORNE JSON com an√°lise visceral completa:

```json
{{
  "avatar_visceral": {{
    "nome_ficticio": "Nome arqueol√≥gico espec√≠fico",
    "perfil_demografico_visceral": {{
      "idade_emocional": "Idade psicol√≥gica real vs cronol√≥gica",
      "status_social_percebido": "Como se v√™ vs como √© visto",
      "pressoes_externas": "Fam√≠lia, sociedade, trabalho",
      "recursos_emocionais": "Energia, tempo, dinheiro emocional"
    }},
    "feridas_abertas": [
      "Lista de 10-15 dores secretas e inconfess√°veis"
    ],
    "sonhos_proibidos": [
      "Lista de 10-15 desejos ardentes e secretos"
    ],
    "demonios_internos": [
      "Lista de 8-12 medos paralisantes e irracionais"
    ],
    "correntes_cotidiano": [
      "Lista de 8-10 frustra√ß√µes di√°rias (pequenas mortes)"
    ],
    "dialeto_alma": {{
      "frases_dor": ["Frases t√≠picas sobre dores"],
      "frases_desejo": ["Frases t√≠picas sobre desejos"],
      "metaforas_comuns": ["Met√°foras que usa"],
      "influenciadores_confianca": ["Quem confia"],
      "fontes_desprezadas": ["Quem despreza"]
    }},
    "muralhas_desconfianca": [
      "Lista de 8-12 obje√ß√µes reais e c√≠nicas"
    ],
    "visoes_paraiso_inferno": {{
      "dia_perfeito": "Narrativa do dia ideal p√≥s-transforma√ß√£o",
      "pesadelo_recorrente": "Narrativa do pior cen√°rio sem solu√ß√£o"
    }}
  }},
  "segmentacao_psicologica": [
    {{
      "nome_segmento": "Nome do subsegmento",
      "caracteristicas": "Caracter√≠sticas psicol√≥gicas distintas",
      "abordagem_especifica": "Como abordar este segmento"
    }}
  ],
  "arsenal_tatico": {{
    "angulos_copy_poderoso": ["√Çngulos de copywriting"],
    "tipos_conteudo_atrativo": ["Tipos de conte√∫do"],
    "tom_voz_ideal": "Tom de comunica√ß√£o",
    "gatilhos_emocionais": ["Principais gatilhos"]
  }}
}}
```
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_visceral_response(response, data)
        else:
            return self._generate_visceral_fallback(data)

    def _process_visceral_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta visceral"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                return self._extract_visceral_insights(response, data)
        except:
            return self._generate_visceral_fallback(data)

    def _extract_visceral_insights(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights viscerais"""
        return {
            'avatar_visceral': {
                'analise_bruta': text[:3000],
                'insights_viscerais': [
                    'Dores profundas identificadas na an√°lise',
                    'Desejos secretos mapeados',
                    'Medos paralisantes descobertos'
                ]
            },
            'status': 'visceral_analysis_complete'
        }

    def _generate_visceral_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera an√°lise visceral de fallback"""
        segmento = data.get('segmento', 'neg√≥cios')

        return {
            'avatar_visceral': {
                'nome_ficticio': f'Profissional {segmento} em Crise',
                'feridas_abertas': [
                    f'Trabalhar excessivamente em {segmento} sem ver crescimento',
                    'Sentir-se sempre atr√°s da concorr√™ncia',
                    'Medo constante de fracasso p√∫blico',
                    'S√≠ndrome do impostor profissional',
                    'Sacrificar vida pessoal pelo trabalho'
                ],
                'sonhos_proibidos': [
                    f'Ser reconhecido como autoridade em {segmento}',
                    'Ter liberdade financeira total',
                    'Trabalhar apenas com o que ama',
                    'Ser invejado pelos pares',
                    'Deixar um legado duradouro'
                ]
            },
            'status': 'visceral_fallback'
        }

    def _execute_agent_visceral_master(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa agente visceral master"""
        try:
            # Remove refer√™ncias circulares dos dados antes de processar
            clean_data = self._clean_data_for_processing(data)

            # Evita importa√ß√£o circular
            import importlib
            visceral_module = importlib.import_module('services.visceral_master_agent')
            return visceral_module.visceral_master.execute_visceral_analysis(clean_data, clean_data, session_id=None)
        except Exception as e:
            logger.error(f"‚ùå Erro no agente visceral_master: {str(e)}")
            return {'error': str(e), 'agent': 'visceral_master', 'fallback': True}

class DriversArchitectAgent:
    """ARQUITETO DE DRIVERS MENTAIS"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Cria arsenal completo de drivers mentais"""

        prompt = f"""
# VOC√ä √â O ARQUITETO DE DRIVERS MENTAIS

Miss√£o: Criar gatilhos psicol√≥gicos que funcionam como √¢ncoras emocionais e racionais.

## ARSENAL DOS 19 DRIVERS UNIVERSAIS:
1. DRIVER DA FERIDA EXPOSTA
2. DRIVER DO TROF√âU SECRETO
3. DRIVER DA INVEJA PRODUTIVA
4. DRIVER DO REL√ìGIO PSICOL√ìGICO
5. DRIVER DA IDENTIDADE APRISIONADA
6. DRIVER DO CUSTO INVIS√çVEL
7. DRIVER DA AMBI√á√ÉO EXPANDIDA
8. DRIVER DO DIAGN√ìSTICO BRUTAL
9. DRIVER DO AMBIENTE VAMPIRO
10. DRIVER DO MENTOR SALVADOR
11. DRIVER DA CORAGEM NECESS√ÅRIA
12. DRIVER DO MECANISMO REVELADO
13. DRIVER DA PROVA MATEM√ÅTICA
14. DRIVER DO PADR√ÉO OCULTO
15. DRIVER DA EXCE√á√ÉO POSS√çVEL
16. DRIVER DO ATALHO √âTICO
17. DRIVER DA DECIS√ÉO BIN√ÅRIA
18. DRIVER DA OPORTUNIDADE OCULTA
19. DRIVER DO M√âTODO VS SORTE

## CONTEXTO DO PROJETO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE DRIVERS MENTAIS CUSTOMIZADOS:

Para cada driver, desenvolva:
- Nome impactante (m√°ximo 3 palavras)
- Gatilho central (emo√ß√£o core)
- Defini√ß√£o visceral (1-2 frases ess√™ncia)
- Mec√¢nica psicol√≥gica (como funciona no c√©rebro)
- Roteiro de ativa√ß√£o completo
- Frases de ancoragem (3-5 frases prontas)
- Prova l√≥gica (dados/fatos sustentam)
- Loop de refor√ßo (como reativar)

RETORNE JSON com drivers customizados completos:

```json
{{
  "drivers_customizados": [
    {{
      "nome": "Nome espec√≠fico do driver",
      "gatilho_central": "Emo√ß√£o ou l√≥gica core",
      "definicao_visceral": "Ess√™ncia em 1-2 frases",
      "mecanica_psicologica": "Como funciona no c√©rebro",
      "momento_instalacao": "Quando plantar na jornada",
      "roteiro_ativacao": {{
        "pergunta_abertura": "Pergunta que exp√µe ferida",
        "historia_analogia": "Hist√≥ria espec√≠fica 150+ palavras",
        "metafora_visual": "Met√°fora que ancora na mem√≥ria",
        "comando_acao": "Comando que direciona comportamento"
      }},
      "frases_ancoragem": [
        "Frase 1 de ancoragem",
        "Frase 2 de ancoragem",
        "Frase 3 de ancoragem"
      ],
      "prova_logica": "Dados/fatos que sustentam",
      "loop_reforco": "Como reativar posteriormente"
    }}
  ],
  "sequenciamento_estrategico": {{
    "fase_despertar": ["Drivers para consci√™ncia"],
    "fase_desejo": ["Drivers para amplifica√ß√£o"],
    "fase_decisao": ["Drivers para press√£o"],
    "fase_direcao": ["Drivers para caminho"]
  }},
  "metricas_densidade": {{
    "total_drivers": 0,
    "drivers_emocionais": 0,
    "drivers_racionais": 0,
    "intensidade_media": 0
  }}
}}
```
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_drivers_response(response, data)
        else:
            return self._generate_drivers_fallback(data)

    def _process_drivers_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta dos drivers"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                return self._extract_drivers_from_text(response, data)
        except:
            return self._generate_drivers_fallback(data)

    def _extract_drivers_from_text(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai drivers do texto"""
        return {
            'drivers_customizados': [
                {
                    'nome': f'Driver {data.get("segmento", "Neg√≥cios")}',
                    'gatilho_central': 'Urg√™ncia de transforma√ß√£o',
                    'definicao_visceral': f'Parar de aceitar mediocridade em {data.get("segmento", "neg√≥cios")}',
                    'roteiro_ativacao': {
                        'pergunta_abertura': f'H√° quanto tempo voc√™ aceita resultados medianos em {data.get("segmento", "neg√≥cios")}?',
                        'historia_analogia': f'Conheci um profissional de {data.get("segmento", "neg√≥cios")} que estava na mesma situa√ß√£o...',
                        'comando_acao': 'Pare de aceitar menos do que merece'
                    }
                }
            ],
            'status': 'drivers_fallback'
        }

    def _generate_drivers_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera drivers de fallback"""
        return self._extract_drivers_from_text("", data)

    def _execute_agent_drivers_architect(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Executa agente drivers architect"""
        try:
            # Remove refer√™ncias circulares dos dados antes de processar
            clean_data = self._clean_data_for_processing(data)

            # Evita importa√ß√£o circular
            import importlib
            drivers_module = importlib.import_module('services.mental_drivers_architect')
            return drivers_module.mental_drivers_architect.generate_custom_drivers(
                clean_data.get('segmento', ''),
                clean_data.get('produto', ''),
                clean_data.get('publico', ''),
                clean_data.get('web_research', {}),
                clean_data.get('social_analysis', {})
            )
        except Exception as e:
            logger.error(f"‚ùå Erro no agente drivers_architect: {str(e)}")
            return {'error': str(e), 'agent': 'drivers_architect', 'fallback': True}

class VisualDirectorAgent:
    """DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Cria arsenal completo de PROVIs"""

        prompt = f"""
# VOC√ä √â O DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS

Miss√£o: Transformar TODOS os conceitos abstratos em experi√™ncias f√≠sicas inesquec√≠veis.

## SISTEMA COMPLETO DE PROVAS VISUAIS INSTANT√ÇNEAS (PROVIs):

### CATEGORIAS DE PROVIS:
- **DESTRUIDORAS DE OBJE√á√ÉO**: Contra tempo, dinheiro, tentativas anteriores
- **CRIADORAS DE URG√äNCIA**: Ampulheta, trem partindo, porta fechando
- **INSTALADORAS DE CREN√áA**: Transforma√ß√µes visuais poderosas
- **PROVAS DE M√âTODO**: Demonstra√ß√µes de efic√°cia

## CONTEXTO PARA CRIA√á√ÉO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE ARSENAL COMPLETO DE PROVIS:

Para CADA conceito identificado, crie:

```
PROVI #X: [NOME IMPACTANTE]
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

CONCEITO-ALVO: [O que precisa ser instalado/destru√≠do]
CATEGORIA: [Urg√™ncia/Cren√ßa/Obje√ß√£o/Transforma√ß√£o/M√©todo]
PRIORIDADE: [Cr√≠tica/Alta/M√©dia]

üéØ OBJETIVO PSICOL√ìGICO
[Mudan√ßa mental espec√≠fica desejada]

üî¨ EXPERIMENTO ESCOLHIDO
[Descri√ß√£o clara da demonstra√ß√£o f√≠sica]

üìê ANALOGIA PERFEITA
"Assim como [experimento] ‚Üí Voc√™ [aplica√ß√£o na vida]"

üìù ROTEIRO COMPLETO
‚îå‚îÄ SETUP (30s): [Prepara√ß√£o que cria expectativa]
‚îú‚îÄ EXECU√á√ÉO (60-90s): [Demonstra√ß√£o com tens√£o]
‚îú‚îÄ CL√çMAX (15s): [Momento exato do "AHA!"]
‚îî‚îÄ BRIDGE (30s): [Conex√£o direta com vida deles]

üõ†Ô∏è MATERIAIS: [Lista espec√≠fica e onde conseguir]
‚ö° VARIA√á√ïES: [Online, Grande p√∫blico, Intimista]
üö® PLANO B: [Se algo der errado]
```

RETORNE JSON com arsenal completo de PROVIs:

```json
{{
  "provas_visuais": [
    {{
      "nome": "PROVI 1: Nome impactante",
      "conceito_alvo": "Conceito espec√≠fico a ser provado",
      "categoria": "Destruidora/Criadora/Instaladora/Prova",
      "prioridade": "Cr√≠tica/Alta/M√©dia",
      "objetivo_psicologico": "Mudan√ßa mental desejada",
      "experimento": "Descri√ß√£o detalhada do experimento",
      "analogia_perfeita": "Assim como X, voc√™ Y",
      "roteiro_completo": {{
        "setup": "Prepara√ß√£o (30s)",
        "execucao": "Demonstra√ß√£o (60-90s)",
        "climax": "Momento AHA! (15s)",
        "bridge": "Conex√£o com vida (30s)"
      }},
      "materiais": ["Material 1", "Material 2"],
      "variacoes": {{
        "online": "Adapta√ß√£o para c√¢mera",
        "grande_publico": "Vers√£o amplificada",
        "intimista": "Vers√£o simplificada"
      }},
      "plano_b": "Alternativa se falhar",
      "frases_impacto": {{
        "durante": "Frase durante tens√£o",
        "revelacao": "Frase no momento AHA",
        "ancoragem": "Frase que fica na mem√≥ria"
      }}
    }}
  ],
  "orquestracao_estrategica": {{
    "sequencia_otimizada": ["Ordem dos PROVIs"],
    "escalada_emocional": "Como aumentar intensidade",
    "narrativa_conectora": "Como conectar PROVIs",
    "timing_total": "Dura√ß√£o total recomendada"
  }}
}}
```
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_visual_response(response, data)
        else:
            return self._generate_visual_fallback(data)

    def _process_visual_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta visual"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                return self._extract_visual_insights(response, data)
        except:
            return self._generate_visual_fallback(data)

    def _extract_visual_insights(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights visuais"""
        return {
            'provas_visuais': [
                {
                    'nome': f'PROVI 1: Transforma√ß√£o {data.get("segmento", "Neg√≥cios")}',
                    'conceito_alvo': 'Efic√°cia da metodologia',
                    'experimento': 'Demonstra√ß√£o visual de antes/depois',
                    'materiais': ['Gr√°ficos', 'Dados', 'Compara√ß√µes']
                }
            ],
            'status': 'visual_fallback'
        }

    def _generate_visual_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera PROVIs de fallback"""
        return self._extract_visual_insights("", data)

class AntiObjectionAgent:
    """ESPECIALISTA EM PSICOLOGIA DE VENDAS"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Cria sistema anti-obje√ß√£o completo"""

        prompt = f"""
# VOC√ä √â O ESPECIALISTA EM PSICOLOGIA DE VENDAS

Miss√£o: Criar ARSENAL PSICOL√ìGICO para identificar, antecipar e neutralizar TODAS as obje√ß√µes.

## AS 3 OBJE√á√ïES UNIVERSAIS:
1. **TEMPO**: "Isso n√£o √© prioridade para mim"
2. **DINHEIRO**: "Minha vida n√£o est√° t√£o ruim que precise investir"
3. **CONFIAN√áA**: "Me d√™ uma raz√£o para acreditar"

## AS 5 OBJE√á√ïES OCULTAS CR√çTICAS:
1. **AUTOSSUFICI√äNCIA**: "Acho que consigo sozinho"
2. **SINAL DE FRAQUEZA**: "Aceitar ajuda √© admitir fracasso"
3. **MEDO DO NOVO**: "N√£o tenho pressa"
4. **PRIORIDADES DESEQUILIBRADAS**: "N√£o √© dinheiro"
5. **AUTOESTIMA DESTRU√çDA**: "N√£o confio em mim"

## CONTEXTO PARA AN√ÅLISE:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE SISTEMA ANTI-OBJE√á√ÉO COMPLETO:

Analise o contexto e crie arsenal psicol√≥gico completo com:
- Mapeamento de todas as obje√ß√µes poss√≠veis
- T√©cnicas espec√≠ficas de neutraliza√ß√£o
- Scripts personalizados para cada situa√ß√£o
- Sequ√™ncia psicol√≥gica de aplica√ß√£o
- Arsenal de emerg√™ncia para obje√ß√µes de √∫ltima hora

RETORNE JSON com sistema anti-obje√ß√£o completo:

```json
{{
  "objecoes_universais": {{
    "tempo": {{
      "objecao": "Obje√ß√£o espec√≠fica identificada",
      "raiz_emocional": "Raiz emocional descoberta",
      "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o",
      "scripts_personalizados": ["Script 1", "Script 2", "Script 3"],
      "drives_mentais": ["Driver 1", "Driver 2"],
      "historias_viscerais": ["Hist√≥ria 1", "Hist√≥ria 2"]
    }},
    "dinheiro": {{
      "objecao": "Obje√ß√£o espec√≠fica identificada",
      "raiz_emocional": "Raiz emocional descoberta",
      "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o",
      "scripts_personalizados": ["Script 1", "Script 2", "Script 3"],
      "drives_mentais": ["Driver 1", "Driver 2"],
      "historias_viscerais": ["Hist√≥ria 1", "Hist√≥ria 2"]
    }},
    "confianca": {{
      "objecao": "Obje√ß√£o espec√≠fica identificada",
      "raiz_emocional": "Raiz emocional descoberta",
      "contra_ataque": "T√©cnica espec√≠fica de neutraliza√ß√£o",
      "scripts_personalizados": ["Script 1", "Script 2", "Script 3"],
      "drives_mentais": ["Driver 1", "Driver 2"],
      "historias_viscerais": ["Hist√≥ria 1", "Hist√≥ria 2"]
    }}
  }},
  "objecoes_ocultas": [
    {{
      "tipo": "autossuficiencia",
      "objecao_oculta": "Acho que consigo sozinho",
      "perfil_tipico": "Pessoas com forma√ß√£o superior, ego profissional",
      "raiz_emocional": "Orgulho / Medo de parecer incompetente",
      "sinais": ["Men√ß√µes de tentar sozinho", "Resist√™ncia a ajuda"],
      "contra_ataque": "O Expert que Precisou de Expert",
      "scripts": ["Script espec√≠fico 1", "Script espec√≠fico 2"]
    }}
  ],
  "arsenal_emergencia": [
    "Vamos ser honestos: voc√™ vai continuar adiando at√© quando?",
    "A √∫nica diferen√ßa entre voc√™ e quem j√° conseguiu √© a decis√£o de agir",
    "Quantas oportunidades voc√™ j√° perdeu por 'pensar demais'?",
    "O medo de errar est√° te impedindo de acertar"
  ],
  "sequencia_neutralizacao": [
    "1. IDENTIFICAR: Qual obje√ß√£o est√° sendo verbalizada",
    "2. CONCORDAR: Validar a preocupa√ß√£o como leg√≠tima",
    "3. VALORIZAR: Mostrar que pessoas inteligentes pensam assim",
    "4. APRESENTAR: Oferecer nova perspectiva ou solu√ß√£o",
    "5. CONFIRMAR: Verificar se a obje√ß√£o foi neutralizada",
    "6. ANCORAR: Refor√ßar a nova cren√ßa instalada"
  ]
}}
```
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_anti_objection_response(response, data)
        else:
            return self._generate_anti_objection_fallback(data)

    def _process_anti_objection_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta anti-obje√ß√£o"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                return self._extract_anti_objection_insights(response, data)
        except:
            return self._generate_anti_objection_fallback(data)

    def _extract_anti_objection_insights(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights anti-obje√ß√£o"""
        return {
            'sistema_anti_objecao': {
                'analise_bruta': text[:2000],
                'objecoes_identificadas': [
                    'N√£o tenho tempo para implementar',
                    'Preciso pensar melhor sobre investimento',
                    'Meu caso √© muito espec√≠fico'
                ]
            },
            'status': 'anti_objection_fallback'
        }

    def _generate_anti_objection_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera sistema anti-obje√ß√£o de fallback"""
        return self._extract_anti_objection_insights("", data)

class PrePitchArchitectAgent:
    """MESTRE DO PR√â-PITCH INVIS√çVEL"""

    def execute_analysis(self, data: Dict[str, Any], session_id: str = None) -> Dict[str, Any]:
        """Cria orquestra√ß√£o psicol√≥gica completa"""

        prompt = f"""
# VOC√ä √â O MESTRE DO PR√â-PITCH INVIS√çVEL

Miss√£o: Orquestrar SINFONIA DE TENS√ÉO PSICOL√ìGICA que prepara terreno mental.

## ESTRUTURA DO PR√â-PITCH:

### FASE 1: ORQUESTRA√á√ÉO EMOCIONAL (70% do tempo)
- QUEBRA ‚Üí Destruir ilus√£o confort√°vel
- EXPOSI√á√ÉO ‚Üí Revelar ferida real
- INDIGNA√á√ÉO ‚Üí Criar revolta produtiva
- VISLUMBRE ‚Üí Mostrar o poss√≠vel
- TENS√ÉO ‚Üí Amplificar o gap
- NECESSIDADE ‚Üí Tornar mudan√ßa inevit√°vel

### FASE 2: JUSTIFICA√á√ÉO L√ìGICA (30% do tempo)
- N√∫meros irrefut√°veis
- C√°lculos de ROI conservadores
- Demonstra√ß√µes passo a passo
- Cases com m√©tricas espec√≠ficas

## CONTEXTO:
{json.dumps(data, indent=2, ensure_ascii=False)[:2000]}

## CRIE PR√â-PITCH COMPLETO:

RETORNE JSON com orquestra√ß√£o completa:

```json
{{
  "orquestracao_emocional": {{
    "sequencia_psicologica": [
      {{
        "fase": "quebra",
        "objetivo": "Destruir a ilus√£o confort√°vel",
        "duracao": "3-5 minutos",
        "drivers_utilizados": ["Diagn√≥stico Brutal"],
        "narrativa": "Script espec√≠fico da fase",
        "resultado_esperado": "Desconforto produtivo"
      }}
    ],
    "escalada_emocional": "Como aumentar intensidade",
    "pontos_criticos": ["Momentos de maior impacto"],
    "transicoes": ["Como conectar fases"]
  }},
  "roteiro_completo": {{
    "abertura": {{
      "tempo": "3-5 minutos",
      "script": "Roteiro detalhado da abertura",
      "driver_principal": "Driver utilizado",
      "transicao": "Como conectar com pr√≥xima fase"
    }},
    "desenvolvimento": {{
      "tempo": "8-12 minutos",
      "script": "Roteiro detalhado do desenvolvimento",
      "escalada_emocional": "Como aumentar intensidade",
      "momentos_criticos": ["Momento 1", "Momento 2"]
    }},
    "fechamento": {{
      "tempo": "2-3 minutos",
      "script": "Roteiro detalhado do fechamento",
      "ponte_oferta": "Transi√ß√£o perfeita para pitch",
      "estado_mental_ideal": "Como devem estar mentalmente"
    }}
  }},
  "variacoes_formato": {{
    "webinar": {{
      "duracao_total": "15-20 minutos",
      "adaptacoes": ["Usar chat", "Pausas estrat√©gicas"],
      "timing": "√öltimos 20 minutos antes da oferta"
    }},
    "evento_presencial": {{
      "duracao_total": "25-35 minutos",
      "adaptacoes": ["Intera√ß√£o direta", "Movimenta√ß√£o"],
      "timing": "Distribu√≠do ao longo do evento"
    }}
  }}
}}
```
"""

        response = ai_manager.generate_analysis(prompt)

        if response:
            return self._process_pre_pitch_response(response, data)
        else:
            return self._generate_pre_pitch_fallback(data)

    def _process_pre_pitch_response(self, response: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta do pr√©-pitch"""
        try:
            if "```json" in response:
                start = response.find("```json") + 7
                end = response.rfind("```")
                json_text = response[start:end].strip()
                return json.loads(json_text)
            else:
                return self._extract_pre_pitch_insights(response, data)
        except:
            return self._generate_pre_pitch_fallback(data)

    def _extract_pre_pitch_insights(self, text: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """Extrai insights do pr√©-pitch"""
        return {
            'pre_pitch_invisivel': {
                'orquestracao': text[:2000],
                'fases_psicologicas': [
                    'Quebra de padr√£o',
                    'Exposi√ß√£o da dor',
                    'Vislumbre da solu√ß√£o'
                ]
            },
            'status': 'pre_pitch_fallback'
        }

    def _generate_pre_pitch_fallback(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera pr√©-pitch de fallback"""
        return self._extract_pre_pitch_insights("", data)

# Inst√¢ncia global
psychological_agents = PsychologicalAgentsSystem()